{
  "address": "0x3f0839385DB9cBEa8E73AdA6fa0CFe07E321F61d",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "inbound",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "outbound",
              "type": "address"
            }
          ],
          "internalType": "struct ERC721App.Channel",
          "name": "_basic",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "inbound",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "outbound",
              "type": "address"
            }
          ],
          "internalType": "struct ERC721App.Channel",
          "name": "_incentivized",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenContract",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "recipient",
          "type": "bytes32"
        }
      ],
      "name": "Locked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenContract",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "sender",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "Unlocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "upgrader",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "inbound",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "outbound",
              "type": "address"
            }
          ],
          "indexed": false,
          "internalType": "struct ERC721App.Channel",
          "name": "basic",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "inbound",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "outbound",
              "type": "address"
            }
          ],
          "indexed": false,
          "internalType": "struct ERC721App.Channel",
          "name": "incentivized",
          "type": "tuple"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CHANNEL_UPGRADE_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INBOUND_CHANNEL_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ChannelId",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "channels",
      "outputs": [
        {
          "internalType": "address",
          "name": "inbound",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "outbound",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_recipient",
          "type": "bytes32"
        },
        {
          "internalType": "enum ChannelId",
          "name": "_channelId",
          "type": "uint8"
        }
      ],
      "name": "lock",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_sender",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "unlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "inbound",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "outbound",
              "type": "address"
            }
          ],
          "internalType": "struct ERC721App.Channel",
          "name": "_basic",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "inbound",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "outbound",
              "type": "address"
            }
          ],
          "internalType": "struct ERC721App.Channel",
          "name": "_incentivized",
          "type": "tuple"
        }
      ],
      "name": "upgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5d94a52dd527527c909f5fd58b0dbfd51d957f8876474a1cc58fbd0c7fd017fe",
  "receipt": {
    "to": null,
    "from": "0xBe68fC2d8249eb60bfCf0e71D5A0d2F2e292c4eD",
    "contractAddress": "0x3f0839385DB9cBEa8E73AdA6fa0CFe07E321F61d",
    "transactionIndex": 0,
    "gasUsed": "1287130",
    "logsBloom": "0x
    "blockHash": "0xc25247ef56afd1f59e623367cdf3082f56bc52dcd94cdc5c20c91115c7f207b9",
    "transactionHash": "0x5d94a52dd527527c909f5fd58b0dbfd51d957f8876474a1cc58fbd0c7fd017fe",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 29,
        "transactionHash": "0x5d94a52dd527527c909f5fd58b0dbfd51d957f8876474a1cc58fbd0c7fd017fe",
        "address": "0x3f0839385DB9cBEa8E73AdA6fa0CFe07E321F61d",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x9bac3bf563d906e4c002c9b37dc34326776a9168ece7376a7a577f98c0c99a89",
          "0x000000000000000000000000be68fc2d8249eb60bfcf0e71d5a0d2f2e292c4ed",
          "0x000000000000000000000000be68fc2d8249eb60bfcf0e71d5a0d2f2e292c4ed"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xc25247ef56afd1f59e623367cdf3082f56bc52dcd94cdc5c20c91115c7f207b9"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 29,
        "transactionHash": "0x5d94a52dd527527c909f5fd58b0dbfd51d957f8876474a1cc58fbd0c7fd017fe",
        "address": "0x3f0839385DB9cBEa8E73AdA6fa0CFe07E321F61d",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0xf857e99667b61d9feb64d6cb140ba8a8ba3501d58a4940223c8e74c45932fbf4",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x9bac3bf563d906e4c002c9b37dc34326776a9168ece7376a7a577f98c0c99a89"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xc25247ef56afd1f59e623367cdf3082f56bc52dcd94cdc5c20c91115c7f207b9"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 29,
        "transactionHash": "0x5d94a52dd527527c909f5fd58b0dbfd51d957f8876474a1cc58fbd0c7fd017fe",
        "address": "0x3f0839385DB9cBEa8E73AdA6fa0CFe07E321F61d",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0x9bac3bf563d906e4c002c9b37dc34326776a9168ece7376a7a577f98c0c99a89",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x9bac3bf563d906e4c002c9b37dc34326776a9168ece7376a7a577f98c0c99a89"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0xc25247ef56afd1f59e623367cdf3082f56bc52dcd94cdc5c20c91115c7f207b9"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 29,
        "transactionHash": "0x5d94a52dd527527c909f5fd58b0dbfd51d957f8876474a1cc58fbd0c7fd017fe",
        "address": "0x3f0839385DB9cBEa8E73AdA6fa0CFe07E321F61d",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xf857e99667b61d9feb64d6cb140ba8a8ba3501d58a4940223c8e74c45932fbf4",
          "0x000000000000000000000000774667629726ec1fabebcec0d9139bd1c8f72a23",
          "0x000000000000000000000000be68fc2d8249eb60bfcf0e71d5a0d2f2e292c4ed"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0xc25247ef56afd1f59e623367cdf3082f56bc52dcd94cdc5c20c91115c7f207b9"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 29,
        "transactionHash": "0x5d94a52dd527527c909f5fd58b0dbfd51d957f8876474a1cc58fbd0c7fd017fe",
        "address": "0x3f0839385DB9cBEa8E73AdA6fa0CFe07E321F61d",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xf857e99667b61d9feb64d6cb140ba8a8ba3501d58a4940223c8e74c45932fbf4",
          "0x00000000000000000000000083428c7db9815f482a39a1715684dcf755021997",
          "0x000000000000000000000000be68fc2d8249eb60bfcf0e71d5a0d2f2e292c4ed"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0xc25247ef56afd1f59e623367cdf3082f56bc52dcd94cdc5c20c91115c7f207b9"
      }
    ],
    "blockNumber": 29,
    "cumulativeGasUsed": "1287130",
    "status": 1,
    "byzantium": true
  },
  "args": [
    {
      "inbound": "0x774667629726ec1FaBEbCEc0D9139bD1C8f72a23",
      "outbound": "0xF8F7758FbcEfd546eAEff7dE24AFf666B6228e73"
    },
    {
      "inbound": "0x83428c7db9815f482a39a1715684dCF755021997",
      "outbound": "0xEE9170ABFbf9421Ad6DD07F6BDec9D89F2B581E0"
    }
  ],
  "solcInputHash": "4c5f7479fbcbb8f587221b3596eb14de",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"inbound\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outbound\",\"type\":\"address\"}],\"internalType\":\"struct ERC721App.Channel\",\"name\":\"_basic\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"inbound\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outbound\",\"type\":\"address\"}],\"internalType\":\"struct ERC721App.Channel\",\"name\":\"_incentivized\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"recipient\",\"type\":\"bytes32\"}],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"Unlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"upgrader\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"inbound\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outbound\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct ERC721App.Channel\",\"name\":\"basic\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"inbound\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outbound\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct ERC721App.Channel\",\"name\":\"incentivized\",\"type\":\"tuple\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CHANNEL_UPGRADE_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INBOUND_CHANNEL_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ChannelId\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"channels\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"inbound\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outbound\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_recipient\",\"type\":\"bytes32\"},{\"internalType\":\"enum ChannelId\",\"name\":\"_channelId\",\"type\":\"uint8\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_sender\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"inbound\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outbound\",\"type\":\"address\"}],\"internalType\":\"struct ERC721App.Channel\",\"name\":\"_basic\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"inbound\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outbound\",\"type\":\"address\"}],\"internalType\":\"struct ERC721App.Channel\",\"name\":\"_incentivized\",\"type\":\"tuple\"}],\"name\":\"upgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"lock(address,uint256,bytes32,uint8)\":{\"params\":{\"_channelId\":\"The Channel to use to send token\",\"_recipient\":\"Polkadot address of the receiver\",\"_tokenContract\":\"The NFT contract\",\"_tokenId\":\"The NFT to lock\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"unlock(address,uint256,bytes32,address)\":{\"params\":{\"_recipient\":\"The ETHApp\",\"_sender\":\"Polkadot address of the sender\",\"_tokenContract\":\"The NFT contract\",\"_tokenId\":\"The NFT to lock\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"lock(address,uint256,bytes32,uint8)\":{\"notice\":\"Locks ERC721 token in ERC721App contract\"},\"unlock(address,uint256,bytes32,address)\":{\"notice\":\"Unlocks ERC721 token from ERC721App contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ERC721App.sol\":\"ERC721App\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n    function grantRole(bytes32 role, address account) external;\\n    function revokeRole(bytes32 role, address account) external;\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping (address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if(!hasRole(role, account)) {\\n            revert(string(abi.encodePacked(\\n                \\\"AccessControl: account \\\",\\n                Strings.toHexString(uint160(account), 20),\\n                \\\" is missing role \\\",\\n                Strings.toHexString(uint256(role), 32)\\n            )));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x98fac37221212c8f126f198d262a4df86394bd1a9969f61e40739fe8ac013dd8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xc1c941ad1e580b4623007305921efe2f26fc7320a4edc226234dd707c658a428\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xb8d11e77eb1ed34a33720edb551d7d6a6b0eee2bfaa40a7024020e1fdf879b16\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant alphabet = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = alphabet[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x456e9b3a2bfe189b5249857f624f4139e59331db518483b456c4e587a20552e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@snowfork/snowbridge-contracts/contracts/OutboundChannel.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity >=0.7.6;\\npragma experimental ABIEncoderV2;\\n\\ninterface OutboundChannel {\\n    function submit(address origin, bytes calldata payload) external;\\n}\\n\",\"keccak256\":\"0x5d446d6a0604bd56c556cd50f136537b119289155d7e3d0367b815596730f4dd\",\"license\":\"Apache-2.0\"},\"@snowfork/snowbridge-contracts/contracts/ScaleCodec.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity >=0.7.6;\\n\\nlibrary ScaleCodec {\\n\\n    // Sources:\\n    //   * https://ethereum.stackexchange.com/questions/15350/how-to-convert-an-bytes-to-address-in-solidity/50528\\n    //   * https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\\n\\n    function reverse256(uint256 input) internal pure returns (uint256 v) {\\n        v = input;\\n\\n        // swap bytes\\n        v = ((v & 0xFF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00) >> 8) |\\n            ((v & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) << 8);\\n\\n        // swap 2-byte long pairs\\n        v = ((v & 0xFFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000) >> 16) |\\n            ((v & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) << 16);\\n\\n        // swap 4-byte long pairs\\n        v = ((v & 0xFFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000) >> 32) |\\n            ((v & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) << 32);\\n\\n        // swap 8-byte long pairs\\n        v = ((v & 0xFFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF0000000000000000) >> 64) |\\n            ((v & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) << 64);\\n\\n        // swap 16-byte long pairs\\n        v = (v >> 128) | (v << 128);\\n    }\\n\\n    function reverse128(uint128 input) internal pure returns (uint128 v) {\\n        v = input;\\n\\n        // swap bytes\\n        v = ((v & 0xFF00FF00FF00FF00FF00FF00FF00FF00) >> 8) |\\n            ((v & 0x00FF00FF00FF00FF00FF00FF00FF00FF) << 8);\\n\\n        // swap 2-byte long pairs\\n        v = ((v & 0xFFFF0000FFFF0000FFFF0000FFFF0000) >> 16) |\\n            ((v & 0x0000FFFF0000FFFF0000FFFF0000FFFF) << 16);\\n\\n        // swap 4-byte long pairs\\n        v = ((v & 0xFFFFFFFF00000000FFFFFFFF00000000) >> 32) |\\n            ((v & 0x00000000FFFFFFFF00000000FFFFFFFF) << 32);\\n\\n        // swap 8-byte long pairs\\n        v = (v >> 64) | (v << 64);\\n    }\\n\\n    function reverse64(uint64 input) internal pure returns (uint64 v) {\\n        v = input;\\n\\n        // swap bytes\\n        v = ((v & 0xFF00FF00FF00FF00) >> 8) |\\n            ((v & 0x00FF00FF00FF00FF) << 8);\\n\\n        // swap 2-byte long pairs\\n        v = ((v & 0xFFFF0000FFFF0000) >> 16) |\\n            ((v & 0x0000FFFF0000FFFF) << 16);\\n\\n        // swap 4-byte long pairs\\n        v = (v >> 32) | (v << 32);\\n    }\\n\\n    function reverse32(uint32 input) internal pure returns (uint32 v) {\\n        v = input;\\n\\n        // swap bytes\\n        v = ((v & 0xFF00FF00) >> 8) |\\n            ((v & 0x00FF00FF) << 8);\\n\\n        // swap 2-byte long pairs\\n        v = (v >> 16) | (v << 16);\\n    }\\n\\n    function reverse16(uint16 input) internal pure returns (uint16 v) {\\n        v = input;\\n\\n        // swap bytes\\n        v = (v >> 8) | (v << 8);\\n    }\\n\\n    function encode256(uint256 input) public pure returns (bytes32) {\\n        return bytes32(reverse256(input));\\n    }\\n\\n    function encode128(uint128 input) public pure returns (bytes16) {\\n        return bytes16(reverse128(input));\\n    }\\n\\n    function encode64(uint64 input) public pure returns (bytes8) {\\n        return bytes8(reverse64(input));\\n    }\\n\\n    function encode32(uint32 input) public pure returns (bytes4) {\\n        return bytes4(reverse32(input));\\n    }\\n\\n    function encode16(uint16 input) public pure returns (bytes2) {\\n        return bytes2(reverse16(input));\\n    }\\n\\n    function encode8(uint8 input) public pure returns (bytes1) {\\n        return bytes1(input);\\n    }\\n}\\n\",\"keccak256\":\"0x155f967fb8badeb5eadfde5255c55911e18e6886174bf81afb15df2fbb9fdb62\",\"license\":\"Apache-2.0\"},\"contracts/ERC721App.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport \\\"@snowfork/snowbridge-contracts/contracts/ScaleCodec.sol\\\";\\nimport \\\"@snowfork/snowbridge-contracts/contracts/OutboundChannel.sol\\\";\\n\\nenum ChannelId {\\n    Basic,\\n    Incentivized\\n}\\n\\ncontract ERC721App is AccessControl {\\n    using ScaleCodec for uint256;\\n\\n    mapping(ChannelId => Channel) public channels;\\n\\n    bytes2 constant MINT_CALL = 0x4301;\\n\\n    event Locked(\\n        address tokenContract,\\n        uint256 tokenId,\\n        address sender,\\n        bytes32 recipient\\n    );\\n\\n    event Unlocked(\\n        address tokenContract,\\n        uint256 tokenId,\\n        bytes32 sender,\\n        address recipient\\n    );\\n\\n    event Upgraded(\\n        address upgrader,\\n        Channel basic,\\n        Channel incentivized\\n    );\\n\\n    struct Channel {\\n        address inbound;\\n        address outbound;\\n    }\\n\\n    bytes32 public constant INBOUND_CHANNEL_ROLE =\\n        keccak256(\\\"INBOUND_CHANNEL_ROLE\\\");\\n\\n    bytes32 public constant CHANNEL_UPGRADE_ROLE =\\n        keccak256(\\\"CHANNEL_UPGRADE_ROLE\\\");\\n    constructor(Channel memory _basic, Channel memory _incentivized) {\\n        Channel storage c1 = channels[ChannelId.Basic];\\n        c1.inbound = _basic.inbound;\\n        c1.outbound = _basic.outbound;\\n\\n        Channel storage c2 = channels[ChannelId.Incentivized];\\n        c2.inbound = _incentivized.inbound;\\n        c2.outbound = _incentivized.outbound;\\n\\n        _setupRole(CHANNEL_UPGRADE_ROLE, msg.sender);\\n        _setRoleAdmin(INBOUND_CHANNEL_ROLE, CHANNEL_UPGRADE_ROLE);\\n        _setRoleAdmin(CHANNEL_UPGRADE_ROLE, CHANNEL_UPGRADE_ROLE);\\n        _setupRole(INBOUND_CHANNEL_ROLE, _basic.inbound);\\n        _setupRole(INBOUND_CHANNEL_ROLE, _incentivized.inbound);\\n    }\\n\\n    /**\\n     * @notice Locks ERC721 token in ERC721App contract\\n     * @param _tokenContract The NFT contract\\n     * @param _tokenId The NFT to lock\\n     * @param _recipient Polkadot address of the receiver\\n     * @param _channelId The Channel to use to send token\\n     */\\n    function lock(\\n        address _tokenContract,\\n        uint256 _tokenId,\\n        bytes32 _recipient,\\n        ChannelId _channelId\\n    ) public payable {\\n        require(\\n            _channelId == ChannelId.Basic ||\\n                _channelId == ChannelId.Incentivized,\\n            \\\"Invalid channel ID\\\"\\n        );\\n\\n        IERC721Metadata token = IERC721Metadata(_tokenContract);\\n\\n        emit Locked(_tokenContract, _tokenId, msg.sender, _recipient);\\n\\n        bytes memory call = encodeCall(\\n            _tokenContract,\\n            _tokenId,\\n            msg.sender,\\n            _recipient,\\n            token.tokenURI(_tokenId)\\n        );\\n\\n        OutboundChannel channel = OutboundChannel(\\n            channels[_channelId].outbound\\n        );\\n        channel.submit(msg.sender, call);\\n\\n        token.transferFrom(msg.sender, address(this), _tokenId);\\n    }\\n\\n    /**\\n     * @notice Unlocks ERC721 token from ERC721App contract\\n     * @param _tokenContract The NFT contract\\n     * @param _tokenId The NFT to lock\\n     * @param _sender Polkadot address of the sender\\n     * @param _recipient The ETHApp\\n     */\\n    function unlock(\\n        address _tokenContract,\\n        uint256 _tokenId,\\n        bytes32 _sender,\\n        address _recipient\\n    ) public onlyRole(INBOUND_CHANNEL_ROLE) {\\n        IERC721Metadata token = IERC721Metadata(_tokenContract);\\n\\n        token.transferFrom(address(this), _recipient, _tokenId);\\n        emit Unlocked(_tokenContract, _tokenId, _sender, _recipient);\\n    }\\n\\n    // SCALE-encode payload\\n    function encodeCall(\\n        address _tokenContract,\\n        uint256 _tokenId,\\n        address _sender,\\n        bytes32 _recipient,\\n        string memory\\n    ) private pure returns (bytes memory) {\\n        return\\n            bytes.concat(\\n                MINT_CALL,\\n                abi.encodePacked(_sender),\\n                bytes1(0x00), // Encoding recipient as MultiAddress::Id\\n                _recipient,\\n                abi.encodePacked(_tokenContract),\\n                _tokenId.encode256(),\\n                bytes1(0x00) // Use an empty _tokenURI instead of SCALE encoded _tokenURI\\n            );\\n    }\\n\\n    function upgrade(\\n        Channel memory _basic,\\n        Channel memory _incentivized\\n    ) external onlyRole(CHANNEL_UPGRADE_ROLE) {\\n        Channel storage c1 = channels[ChannelId.Basic];\\n        Channel storage c2 = channels[ChannelId.Incentivized];\\n        // revoke old channel\\n        revokeRole(INBOUND_CHANNEL_ROLE, c1.inbound);\\n        revokeRole(INBOUND_CHANNEL_ROLE, c2.inbound);\\n        // set new channel\\n        c1.inbound = _basic.inbound;\\n        c1.outbound = _basic.outbound;\\n        c2.inbound = _incentivized.inbound;\\n        c2.outbound = _incentivized.outbound;\\n        grantRole(INBOUND_CHANNEL_ROLE, _basic.inbound);\\n        grantRole(INBOUND_CHANNEL_ROLE, _incentivized.inbound);\\n        emit Upgraded(msg.sender, c1, c2);\\n    }\\n}\\n\",\"keccak256\":\"0xbf3eb5393698278bd8477dc4d553bfad4a663250eda328570ff8ba2cc011ccec\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200160b3803806200160b83398101604081905262000034916200034d565b60008080526001602081815284517fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb4980546001600160a01b03199081166001600160a01b03938416178255878401517fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb4a805483169185169190911790559390945284517fcc69885fda6bcc1a4ace058b4a62bf5e179ea78fd58a1ccd71c22cc9b688792f80548516918316919091178155918501517fcc69885fda6bcc1a4ace058b4a62bf5e179ea78fd58a1ccd71c22cc9b6887930805490941691161790915562000130600080516020620015eb83398151915233620001bb565b6200015a600080516020620015cb833981519152600080516020620015eb833981519152620001cb565b62000175600080516020620015eb83398151915280620001cb565b83516200019390600080516020620015cb83398151915290620001bb565b8251620001b190600080516020620015cb83398151915290620001bb565b5050505062000387565b620001c782826200021f565b5050565b600082815260208190526040902060010154819060405184907fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff90600090a460009182526020829052604090912060010155565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16620001c7576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556200027b3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b80516001600160a01b0381168114620002d757600080fd5b919050565b600060408284031215620002ef57600080fd5b604080519081016001600160401b03811182821017156200032057634e487b7160e01b600052604160045260246000fd5b6040529050806200033183620002bf565b81526200034160208401620002bf565b60208201525092915050565b600080608083850312156200036157600080fd5b6200036d8484620002dc565b91506200037e8460408501620002dc565b90509250929050565b61123480620003976000396000f3fe6080604052600436106100c25760003560e01c80638caff9601161007f578063bc0c22a711610059578063bc0c22a714610204578063ccd3413214610226578063d547741f14610287578063fdc16229146102a757600080fd5b80638caff960146101af57806391d14854146101cf578063a217fddf146101ef57600080fd5b806301ffc9a7146100c7578063248a9ca3146100fc5780632f2ff15d1461013a57806336568abe1461015c5780636677e6de1461017c57806371ac2bb61461018f575b600080fd5b3480156100d357600080fd5b506100e76100e2366004610e58565b6102db565b60405190151581526020015b60405180910390f35b34801561010857600080fd5b5061012c610117366004610dfa565b60009081526020819052604090206001015490565b6040519081526020016100f3565b34801561014657600080fd5b5061015a610155366004610e2c565b610312565b005b34801561016857600080fd5b5061015a610177366004610e2c565b61033d565b61015a61018a366004610dbf565b6103c0565b34801561019b57600080fd5b5061015a6101aa366004610f4a565b610627565b3480156101bb57600080fd5b5061015a6101ca366004610d79565b6107b5565b3480156101db57600080fd5b506100e76101ea366004610e2c565b610893565b3480156101fb57600080fd5b5061012c600081565b34801561021057600080fd5b5061012c6000805160206111df83398151915281565b34801561023257600080fd5b50610267610241366004610e82565b600160208190526000918252604090912080549101546001600160a01b03918216911682565b604080516001600160a01b039384168152929091166020830152016100f3565b34801561029357600080fd5b5061015a6102a2366004610e2c565b6108bc565b3480156102b357600080fd5b5061012c7f9bac3bf563d906e4c002c9b37dc34326776a9168ece7376a7a577f98c0c99a8981565b60006001600160e01b03198216637965db0b60e01b148061030c57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60008281526020819052604090206001015461032e81336108e2565b6103388383610946565b505050565b6001600160a01b03811633146103b25760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6103bc82826109ca565b5050565b60008160018111156103d4576103d461119c565b14806103f1575060018160018111156103ef576103ef61119c565b145b6104325760405162461bcd60e51b8152602060048201526012602482015271125b9d985b1a590818da185b9b995b08125160721b60448201526064016103a9565b604080516001600160a01b038616815260208101859052338183015260608101849052905185917ff9e8f47bd010f225f3d63194767d1bfd468e2bbf8dd0cf3a9eda77b64fd64f59919081900360800190a1600061051486863387866001600160a01b031663c87b56dd8b6040518263ffffffff1660e01b81526004016104bb91815260200190565b60006040518083038186803b1580156104d357600080fd5b505afa1580156104e7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261050f9190810190610e9d565b610a2f565b905060006001600085600181111561052e5761052e61119c565b600181111561053f5761053f61119c565b8152602081019190915260409081016000206001015490516376846edd60e01b81526001600160a01b03909116915081906376846edd90610586903390869060040161108b565b600060405180830381600087803b1580156105a057600080fd5b505af11580156105b4573d6000803e3d6000fd5b50506040516323b872dd60e01b8152336004820152306024820152604481018990526001600160a01b03861692506323b872dd9150606401600060405180830381600087803b15801561060657600080fd5b505af115801561061a573d6000803e3d6000fd5b5050505050505050505050565b7f9bac3bf563d906e4c002c9b37dc34326776a9168ece7376a7a577f98c0c99a8961065281336108e2565b600160208190526000527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb4980547fcc69885fda6bcc1a4ace058b4a62bf5e179ea78fd58a1ccd71c22cc9b688792f906106c3906000805160206111df833981519152906001600160a01b03166108bc565b80546106e7906000805160206111df833981519152906001600160a01b03166108bc565b845182546001600160a01b03199081166001600160a01b03808416919091178555602080890151600180880180548616928516929092179091558851865485169084161786559088015190850180549093169116179055610757906000805160206111df83398151915290610312565b6107736000805160206111df8339815191528560000151610312565b7f30f77c97dcde9bb66d94051acfc00bf7cc5b681a05081da244812234f00374903383836040516107a6939291906110b7565b60405180910390a15050505050565b6000805160206111df8339815191526107ce81336108e2565b6040516323b872dd60e01b81523060048201526001600160a01b038381166024830152604482018690528691908216906323b872dd90606401600060405180830381600087803b15801561082157600080fd5b505af1158015610835573d6000803e3d6000fd5b5050604080516001600160a01b038a81168252602082018a90528183018990528716606082015290517f91866269a07005261072e1fab91b423eb26cdd847fb0bdfe460aaff27fbc2d759350908190036080019150a1505050505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6000828152602081905260409020600101546108d881336108e2565b61033883836109ca565b6108ec8282610893565b6103bc57610904816001600160a01b03166014610b4d565b61090f836020610b4d565b604051602001610920929190611016565b60408051601f198184030181529082905262461bcd60e51b82526103a9916004016110f5565b6109508282610893565b6103bc576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556109863390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6109d48282610893565b156103bc576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b604051606084811b6bffffffffffffffffffffffff191660208301529061430160f01b9060340160408051601f19818403018152908290526bffffffffffffffffffffffff1960608a901b16602083015290600090869060340160408051808303601f1901815290829052636fea3f0760e11b8252600482018b9052907386D9aC0Bab011917f57B9E9607833b4340F9D4F89063dfd47e0e9060240160206040518083038186803b158015610ae357600080fd5b505af4158015610af7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1b9190610e13565b604051610b3396959493929190600090602001610fa2565b604051602081830303815290604052905095945050505050565b60606000610b5c836002611120565b610b67906002611108565b67ffffffffffffffff811115610b7f57610b7f6111c8565b6040519080825280601f01601f191660200182016040528015610ba9576020820181803683370190505b509050600360fc1b81600081518110610bc457610bc46111b2565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110610bf357610bf36111b2565b60200101906001600160f81b031916908160001a9053506000610c17846002611120565b610c22906001611108565b90505b6001811115610c9a576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110610c5657610c566111b2565b1a60f81b828281518110610c6c57610c6c6111b2565b60200101906001600160f81b031916908160001a90535060049490941c93610c938161116f565b9050610c25565b508315610ce95760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016103a9565b9392505050565b80356001600160a01b0381168114610d0757600080fd5b919050565b803560028110610d0757600080fd5b600060408284031215610d2d57600080fd5b6040516040810181811067ffffffffffffffff82111715610d5057610d506111c8565b604052905080610d5f83610cf0565b8152610d6d60208401610cf0565b60208201525092915050565b60008060008060808587031215610d8f57600080fd5b610d9885610cf0565b93506020850135925060408501359150610db460608601610cf0565b905092959194509250565b60008060008060808587031215610dd557600080fd5b610dde85610cf0565b93506020850135925060408501359150610db460608601610d0c565b600060208284031215610e0c57600080fd5b5035919050565b600060208284031215610e2557600080fd5b5051919050565b60008060408385031215610e3f57600080fd5b82359150610e4f60208401610cf0565b90509250929050565b600060208284031215610e6a57600080fd5b81356001600160e01b031981168114610ce957600080fd5b600060208284031215610e9457600080fd5b610ce982610d0c565b600060208284031215610eaf57600080fd5b815167ffffffffffffffff80821115610ec757600080fd5b818401915084601f830112610edb57600080fd5b815181811115610eed57610eed6111c8565b604051601f8201601f19908116603f01168101908382118183101715610f1557610f156111c8565b81604052828152876020848701011115610f2e57600080fd5b610f3f83602083016020880161113f565b979650505050505050565b60008060808385031215610f5d57600080fd5b610f678484610d1b565b9150610e4f8460408501610d1b565b60008151808452610f8e81602086016020860161113f565b601f01601f19169290920160200192915050565b6001600160f01b0319881681528651600090610fc5816002850160208c0161113f565b6001600160f81b0319888116600292850192830152600382018890528651610ff4816023850160208b0161113f565b6023920191820195909552929093166043830152506044019695505050505050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161104e81601785016020880161113f565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161107f81602884016020880161113f565b01602801949350505050565b6001600160a01b03831681526040602082018190526000906110af90830184610f76565b949350505050565b6001600160a01b0384811682528354811660208301526001808501548216604084015283548216606084015283015416608082015260a081016110af565b602081526000610ce96020830184610f76565b6000821982111561111b5761111b611186565b500190565b600081600019048311821515161561113a5761113a611186565b500290565b60005b8381101561115a578181015183820152602001611142565b83811115611169576000848401525b50505050565b60008161117e5761117e611186565b506000190190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfef857e99667b61d9feb64d6cb140ba8a8ba3501d58a4940223c8e74c45932fbf4a2646970667358221220c6722a224eb35267a01ea289a9ae35283e437bec6252bd1fa08dca62c847a3a964736f6c63430008060033f857e99667b61d9feb64d6cb140ba8a8ba3501d58a4940223c8e74c45932fbf49bac3bf563d906e4c002c9b37dc34326776a9168ece7376a7a577f98c0c99a89",
  "deployedBytecode": "0x6080604052600436106100c25760003560e01c80638caff9601161007f578063bc0c22a711610059578063bc0c22a714610204578063ccd3413214610226578063d547741f14610287578063fdc16229146102a757600080fd5b80638caff960146101af57806391d14854146101cf578063a217fddf146101ef57600080fd5b806301ffc9a7146100c7578063248a9ca3146100fc5780632f2ff15d1461013a57806336568abe1461015c5780636677e6de1461017c57806371ac2bb61461018f575b600080fd5b3480156100d357600080fd5b506100e76100e2366004610e58565b6102db565b60405190151581526020015b60405180910390f35b34801561010857600080fd5b5061012c610117366004610dfa565b60009081526020819052604090206001015490565b6040519081526020016100f3565b34801561014657600080fd5b5061015a610155366004610e2c565b610312565b005b34801561016857600080fd5b5061015a610177366004610e2c565b61033d565b61015a61018a366004610dbf565b6103c0565b34801561019b57600080fd5b5061015a6101aa366004610f4a565b610627565b3480156101bb57600080fd5b5061015a6101ca366004610d79565b6107b5565b3480156101db57600080fd5b506100e76101ea366004610e2c565b610893565b3480156101fb57600080fd5b5061012c600081565b34801561021057600080fd5b5061012c6000805160206111df83398151915281565b34801561023257600080fd5b50610267610241366004610e82565b600160208190526000918252604090912080549101546001600160a01b03918216911682565b604080516001600160a01b039384168152929091166020830152016100f3565b34801561029357600080fd5b5061015a6102a2366004610e2c565b6108bc565b3480156102b357600080fd5b5061012c7f9bac3bf563d906e4c002c9b37dc34326776a9168ece7376a7a577f98c0c99a8981565b60006001600160e01b03198216637965db0b60e01b148061030c57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60008281526020819052604090206001015461032e81336108e2565b6103388383610946565b505050565b6001600160a01b03811633146103b25760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6103bc82826109ca565b5050565b60008160018111156103d4576103d461119c565b14806103f1575060018160018111156103ef576103ef61119c565b145b6104325760405162461bcd60e51b8152602060048201526012602482015271125b9d985b1a590818da185b9b995b08125160721b60448201526064016103a9565b604080516001600160a01b038616815260208101859052338183015260608101849052905185917ff9e8f47bd010f225f3d63194767d1bfd468e2bbf8dd0cf3a9eda77b64fd64f59919081900360800190a1600061051486863387866001600160a01b031663c87b56dd8b6040518263ffffffff1660e01b81526004016104bb91815260200190565b60006040518083038186803b1580156104d357600080fd5b505afa1580156104e7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261050f9190810190610e9d565b610a2f565b905060006001600085600181111561052e5761052e61119c565b600181111561053f5761053f61119c565b8152602081019190915260409081016000206001015490516376846edd60e01b81526001600160a01b03909116915081906376846edd90610586903390869060040161108b565b600060405180830381600087803b1580156105a057600080fd5b505af11580156105b4573d6000803e3d6000fd5b50506040516323b872dd60e01b8152336004820152306024820152604481018990526001600160a01b03861692506323b872dd9150606401600060405180830381600087803b15801561060657600080fd5b505af115801561061a573d6000803e3d6000fd5b5050505050505050505050565b7f9bac3bf563d906e4c002c9b37dc34326776a9168ece7376a7a577f98c0c99a8961065281336108e2565b600160208190526000527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb4980547fcc69885fda6bcc1a4ace058b4a62bf5e179ea78fd58a1ccd71c22cc9b688792f906106c3906000805160206111df833981519152906001600160a01b03166108bc565b80546106e7906000805160206111df833981519152906001600160a01b03166108bc565b845182546001600160a01b03199081166001600160a01b03808416919091178555602080890151600180880180548616928516929092179091558851865485169084161786559088015190850180549093169116179055610757906000805160206111df83398151915290610312565b6107736000805160206111df8339815191528560000151610312565b7f30f77c97dcde9bb66d94051acfc00bf7cc5b681a05081da244812234f00374903383836040516107a6939291906110b7565b60405180910390a15050505050565b6000805160206111df8339815191526107ce81336108e2565b6040516323b872dd60e01b81523060048201526001600160a01b038381166024830152604482018690528691908216906323b872dd90606401600060405180830381600087803b15801561082157600080fd5b505af1158015610835573d6000803e3d6000fd5b5050604080516001600160a01b038a81168252602082018a90528183018990528716606082015290517f91866269a07005261072e1fab91b423eb26cdd847fb0bdfe460aaff27fbc2d759350908190036080019150a1505050505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6000828152602081905260409020600101546108d881336108e2565b61033883836109ca565b6108ec8282610893565b6103bc57610904816001600160a01b03166014610b4d565b61090f836020610b4d565b604051602001610920929190611016565b60408051601f198184030181529082905262461bcd60e51b82526103a9916004016110f5565b6109508282610893565b6103bc576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556109863390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6109d48282610893565b156103bc576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b604051606084811b6bffffffffffffffffffffffff191660208301529061430160f01b9060340160408051601f19818403018152908290526bffffffffffffffffffffffff1960608a901b16602083015290600090869060340160408051808303601f1901815290829052636fea3f0760e11b8252600482018b90529073__$276cc14ce47cc15bfe88c6e1cbd14dec7e$__9063dfd47e0e9060240160206040518083038186803b158015610ae357600080fd5b505af4158015610af7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1b9190610e13565b604051610b3396959493929190600090602001610fa2565b604051602081830303815290604052905095945050505050565b60606000610b5c836002611120565b610b67906002611108565b67ffffffffffffffff811115610b7f57610b7f6111c8565b6040519080825280601f01601f191660200182016040528015610ba9576020820181803683370190505b509050600360fc1b81600081518110610bc457610bc46111b2565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110610bf357610bf36111b2565b60200101906001600160f81b031916908160001a9053506000610c17846002611120565b610c22906001611108565b90505b6001811115610c9a576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110610c5657610c566111b2565b1a60f81b828281518110610c6c57610c6c6111b2565b60200101906001600160f81b031916908160001a90535060049490941c93610c938161116f565b9050610c25565b508315610ce95760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016103a9565b9392505050565b80356001600160a01b0381168114610d0757600080fd5b919050565b803560028110610d0757600080fd5b600060408284031215610d2d57600080fd5b6040516040810181811067ffffffffffffffff82111715610d5057610d506111c8565b604052905080610d5f83610cf0565b8152610d6d60208401610cf0565b60208201525092915050565b60008060008060808587031215610d8f57600080fd5b610d9885610cf0565b93506020850135925060408501359150610db460608601610cf0565b905092959194509250565b60008060008060808587031215610dd557600080fd5b610dde85610cf0565b93506020850135925060408501359150610db460608601610d0c565b600060208284031215610e0c57600080fd5b5035919050565b600060208284031215610e2557600080fd5b5051919050565b60008060408385031215610e3f57600080fd5b82359150610e4f60208401610cf0565b90509250929050565b600060208284031215610e6a57600080fd5b81356001600160e01b031981168114610ce957600080fd5b600060208284031215610e9457600080fd5b610ce982610d0c565b600060208284031215610eaf57600080fd5b815167ffffffffffffffff80821115610ec757600080fd5b818401915084601f830112610edb57600080fd5b815181811115610eed57610eed6111c8565b604051601f8201601f19908116603f01168101908382118183101715610f1557610f156111c8565b81604052828152876020848701011115610f2e57600080fd5b610f3f83602083016020880161113f565b979650505050505050565b60008060808385031215610f5d57600080fd5b610f678484610d1b565b9150610e4f8460408501610d1b565b60008151808452610f8e81602086016020860161113f565b601f01601f19169290920160200192915050565b6001600160f01b0319881681528651600090610fc5816002850160208c0161113f565b6001600160f81b0319888116600292850192830152600382018890528651610ff4816023850160208b0161113f565b6023920191820195909552929093166043830152506044019695505050505050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161104e81601785016020880161113f565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161107f81602884016020880161113f565b01602801949350505050565b6001600160a01b03831681526040602082018190526000906110af90830184610f76565b949350505050565b6001600160a01b0384811682528354811660208301526001808501548216604084015283548216606084015283015416608082015260a081016110af565b602081526000610ce96020830184610f76565b6000821982111561111b5761111b611186565b500190565b600081600019048311821515161561113a5761113a611186565b500290565b60005b8381101561115a578181015183820152602001611142565b83811115611169576000848401525b50505050565b60008161117e5761117e611186565b506000190190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfef857e99667b61d9feb64d6cb140ba8a8ba3501d58a4940223c8e74c45932fbf4a2646970667358221220c6722a224eb35267a01ea289a9ae35283e437bec6252bd1fa08dca62c847a3a964736f6c63430008060033",
  "libraries": {
    "ScaleCodec": "0x86D9aC0Bab011917f57B9E9607833b4340F9D4F8"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "lock(address,uint256,bytes32,uint8)": {
        "params": {
          "_channelId": "The Channel to use to send token",
          "_recipient": "Polkadot address of the receiver",
          "_tokenContract": "The NFT contract",
          "_tokenId": "The NFT to lock"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "unlock(address,uint256,bytes32,address)": {
        "params": {
          "_recipient": "The ETHApp",
          "_sender": "Polkadot address of the sender",
          "_tokenContract": "The NFT contract",
          "_tokenId": "The NFT to lock"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "lock(address,uint256,bytes32,uint8)": {
        "notice": "Locks ERC721 token in ERC721App contract"
      },
      "unlock(address,uint256,bytes32,address)": {
        "notice": "Unlocks ERC721 token from ERC721App contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 62,
        "contract": "contracts/ERC721App.sol:ERC721App",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)57_storage)"
      },
      {
        "astId": 9157,
        "contract": "contracts/ERC721App.sol:ERC721App",
        "label": "channels",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_enum(ChannelId)9146,t_struct(Channel)9195_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(ChannelId)9146": {
        "encoding": "inplace",
        "label": "enum ChannelId",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)57_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)57_storage"
      },
      "t_mapping(t_enum(ChannelId)9146,t_struct(Channel)9195_storage)": {
        "encoding": "mapping",
        "key": "t_enum(ChannelId)9146",
        "label": "mapping(enum ChannelId => struct ERC721App.Channel)",
        "numberOfBytes": "32",
        "value": "t_struct(Channel)9195_storage"
      },
      "t_struct(Channel)9195_storage": {
        "encoding": "inplace",
        "label": "struct ERC721App.Channel",
        "members": [
          {
            "astId": 9192,
            "contract": "contracts/ERC721App.sol:ERC721App",
            "label": "inbound",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 9194,
            "contract": "contracts/ERC721App.sol:ERC721App",
            "label": "outbound",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)57_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 54,
            "contract": "contracts/ERC721App.sol:ERC721App",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 56,
            "contract": "contracts/ERC721App.sol:ERC721App",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      }
    }
  }
}