{
  "address": "0x87d1f7fdfEe7f651FaBc8bFCB6E086C278b77A7d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ValidatorRegistry",
          "name": "_validatorRegistry",
          "type": "address"
        },
        {
          "internalType": "contract SimplifiedMMRVerification",
          "name": "_mmrVerification",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_startingBeefyBlock",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "prover",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "FinalVerificationSuccessful",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "prover",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "InitialVerificationSuccessful",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "mmrRoot",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "blockNumber",
          "type": "uint64"
        }
      ],
      "name": "NewMMRRoot",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BLOCK_WAIT_PERIOD",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ERROR_AND_SAFETY_BUFFER",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAXIMUM_BLOCK_GAP",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NUMBER_OF_BLOCKS_PER_SESSION",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "THRESHOLD_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "THRESHOLD_NUMERATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "blockNumber",
              "type": "uint32"
            },
            {
              "internalType": "uint64",
              "name": "validatorSetId",
              "type": "uint64"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "mmrRootHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes",
                  "name": "prefix",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "suffix",
                  "type": "bytes"
                }
              ],
              "internalType": "struct BeefyLightClient.Payload",
              "name": "payload",
              "type": "tuple"
            }
          ],
          "internalType": "struct BeefyLightClient.Commitment",
          "name": "commitment",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes[]",
              "name": "signatures",
              "type": "bytes[]"
            },
            {
              "internalType": "uint256[]",
              "name": "positions",
              "type": "uint256[]"
            },
            {
              "internalType": "address[]",
              "name": "publicKeys",
              "type": "address[]"
            },
            {
              "internalType": "bytes32[][]",
              "name": "publicKeyMerkleProofs",
              "type": "bytes32[][]"
            }
          ],
          "internalType": "struct BeefyLightClient.ValidatorProof",
          "name": "validatorProof",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "version",
              "type": "uint8"
            },
            {
              "internalType": "uint32",
              "name": "parentNumber",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "parentHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nextAuthoritySetId",
              "type": "uint64"
            },
            {
              "internalType": "uint32",
              "name": "nextAuthoritySetLen",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "nextAuthoritySetRoot",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "parachainHeadsRoot",
              "type": "bytes32"
            }
          ],
          "internalType": "struct BeefyLightClient.BeefyMMRLeaf",
          "name": "latestMMRLeaf",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes32[]",
              "name": "merkleProofItems",
              "type": "bytes32[]"
            },
            {
              "internalType": "uint64",
              "name": "merkleProofOrderBitField",
              "type": "uint64"
            }
          ],
          "internalType": "struct SimplifiedMMRProof",
          "name": "proof",
          "type": "tuple"
        }
      ],
      "name": "completeSignatureCommitment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "bitsToSet",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        }
      ],
      "name": "createInitialBitfield",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "createRandomBitfield",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestBeefyBlock",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestMMRRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mmrVerification",
      "outputs": [
        {
          "internalType": "contract SimplifiedMMRVerification",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "commitmentHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "validatorClaimsBitfield",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "validatorSignature",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "validatorPosition",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "validatorPublicKey",
          "type": "address"
        },
        {
          "internalType": "bytes32[]",
          "name": "validatorPublicKeyMerkleProof",
          "type": "bytes32[]"
        }
      ],
      "name": "newSignatureCommitment",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "numValidators",
          "type": "uint256"
        }
      ],
      "name": "requiredNumberOfSignatures",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requiredNumberOfSignatures",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "validationData",
      "outputs": [
        {
          "internalType": "address",
          "name": "senderAddress",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "commitmentHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "validatorRegistry",
      "outputs": [
        {
          "internalType": "contract ValidatorRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "beefyMMRLeaf",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "bytes32[]",
              "name": "merkleProofItems",
              "type": "bytes32[]"
            },
            {
              "internalType": "uint64",
              "name": "merkleProofOrderBitField",
              "type": "uint64"
            }
          ],
          "internalType": "struct SimplifiedMMRProof",
          "name": "proof",
          "type": "tuple"
        }
      ],
      "name": "verifyBeefyMerkleLeaf",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "version",
              "type": "uint8"
            },
            {
              "internalType": "uint32",
              "name": "parentNumber",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "parentHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nextAuthoritySetId",
              "type": "uint64"
            },
            {
              "internalType": "uint32",
              "name": "nextAuthoritySetLen",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "nextAuthoritySetRoot",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "parachainHeadsRoot",
              "type": "bytes32"
            }
          ],
          "internalType": "struct BeefyLightClient.BeefyMMRLeaf",
          "name": "leaf",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "root",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "bytes32[]",
              "name": "merkleProofItems",
              "type": "bytes32[]"
            },
            {
              "internalType": "uint64",
              "name": "merkleProofOrderBitField",
              "type": "uint64"
            }
          ],
          "internalType": "struct SimplifiedMMRProof",
          "name": "proof",
          "type": "tuple"
        }
      ],
      "name": "verifyNewestMMRLeaf",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd5727c281c0c023ffb4bcb909c0bb8f332495e58b64c0b11b7677a14d50636da",
  "receipt": {
    "to": null,
    "from": "0xBe68fC2d8249eb60bfCf0e71D5A0d2F2e292c4eD",
    "contractAddress": "0x87d1f7fdfEe7f651FaBc8bFCB6E086C278b77A7d",
    "transactionIndex": 0,
    "gasUsed": "2395218",
    "logsBloom": "0x
    "blockHash": "0xe105e81ad0651a4205c14689b40d96766fa857249df8347a015340596a800994",
    "transactionHash": "0xd5727c281c0c023ffb4bcb909c0bb8f332495e58b64c0b11b7677a14d50636da",
    "logs": [],
    "blockNumber": 13,
    "cumulativeGasUsed": "2395218",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xFc97A6197dc90bef6bbEFD672742Ed75E9768553",
    "0xEDa338E4dC46038493b885327842fD3E301CaB39",
    0
  ],
  "solcInputHash": "4c5f7479fbcbb8f587221b3596eb14de",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ValidatorRegistry\",\"name\":\"_validatorRegistry\",\"type\":\"address\"},{\"internalType\":\"contract SimplifiedMMRVerification\",\"name\":\"_mmrVerification\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_startingBeefyBlock\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"prover\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"FinalVerificationSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"prover\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"InitialVerificationSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"mmrRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"blockNumber\",\"type\":\"uint64\"}],\"name\":\"NewMMRRoot\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BLOCK_WAIT_PERIOD\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERROR_AND_SAFETY_BUFFER\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAXIMUM_BLOCK_GAP\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NUMBER_OF_BLOCKS_PER_SESSION\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"THRESHOLD_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"THRESHOLD_NUMERATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"validatorSetId\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"mmrRootHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"prefix\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"suffix\",\"type\":\"bytes\"}],\"internalType\":\"struct BeefyLightClient.Payload\",\"name\":\"payload\",\"type\":\"tuple\"}],\"internalType\":\"struct BeefyLightClient.Commitment\",\"name\":\"commitment\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"positions\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"publicKeys\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[][]\",\"name\":\"publicKeyMerkleProofs\",\"type\":\"bytes32[][]\"}],\"internalType\":\"struct BeefyLightClient.ValidatorProof\",\"name\":\"validatorProof\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"parentNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"parentHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nextAuthoritySetId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"nextAuthoritySetLen\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"nextAuthoritySetRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"parachainHeadsRoot\",\"type\":\"bytes32\"}],\"internalType\":\"struct BeefyLightClient.BeefyMMRLeaf\",\"name\":\"latestMMRLeaf\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32[]\",\"name\":\"merkleProofItems\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint64\",\"name\":\"merkleProofOrderBitField\",\"type\":\"uint64\"}],\"internalType\":\"struct SimplifiedMMRProof\",\"name\":\"proof\",\"type\":\"tuple\"}],\"name\":\"completeSignatureCommitment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"bitsToSet\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"createInitialBitfield\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"createRandomBitfield\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestBeefyBlock\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestMMRRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mmrVerification\",\"outputs\":[{\"internalType\":\"contract SimplifiedMMRVerification\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"commitmentHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"validatorClaimsBitfield\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"validatorSignature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"validatorPosition\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"validatorPublicKey\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"validatorPublicKeyMerkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"newSignatureCommitment\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numValidators\",\"type\":\"uint256\"}],\"name\":\"requiredNumberOfSignatures\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredNumberOfSignatures\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"validationData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"senderAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"commitmentHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorRegistry\",\"outputs\":[{\"internalType\":\"contract ValidatorRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"beefyMMRLeaf\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32[]\",\"name\":\"merkleProofItems\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint64\",\"name\":\"merkleProofOrderBitField\",\"type\":\"uint64\"}],\"internalType\":\"struct SimplifiedMMRProof\",\"name\":\"proof\",\"type\":\"tuple\"}],\"name\":\"verifyBeefyMerkleLeaf\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"parentNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"parentHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nextAuthoritySetId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"nextAuthoritySetLen\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"nextAuthoritySetRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"parachainHeadsRoot\",\"type\":\"bytes32\"}],\"internalType\":\"struct BeefyLightClient.BeefyMMRLeaf\",\"name\":\"leaf\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32[]\",\"name\":\"merkleProofItems\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint64\",\"name\":\"merkleProofOrderBitField\",\"type\":\"uint64\"}],\"internalType\":\"struct SimplifiedMMRProof\",\"name\":\"proof\",\"type\":\"tuple\"}],\"name\":\"verifyNewestMMRLeaf\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"FinalVerificationSuccessful(address,uint256)\":{\"params\":{\"id\":\"the identifier used\",\"prover\":\"The address of the successful prover\"}},\"InitialVerificationSuccessful(address,uint256,uint256)\":{\"details\":\"Note that the prover must wait until `n` blocks have been mined subsequent to the generation of this event before the 2nd tx can be sent\",\"params\":{\"blockNumber\":\"The blocknumber in which the initial validation succeeded\",\"id\":\"An identifier to provide disambiguation\",\"prover\":\"The address of the calling prover\"}}},\"kind\":\"dev\",\"methods\":{\"completeSignatureCommitment(uint256,(uint32,uint64,(bytes32,bytes,bytes)),(bytes[],uint256[],address[],bytes32[][]),(uint8,uint32,bytes32,uint64,uint32,bytes32,bytes32),(bytes32[],uint64))\":{\"params\":{\"commitment\":\"contains the full commitment that was used for the commitmentHash\",\"id\":\"an identifying value generated in the previous transaction\",\"validatorProof\":\"a struct containing the data needed to verify all validator signatures\"}},\"constructor\":{\"params\":{\"_mmrVerification\":\"The contract to be used for MMR verification\",\"_validatorRegistry\":\"The contract to be used as the validator registry\"}},\"newSignatureCommitment(bytes32,uint256[],bytes,uint256,address,bytes32[])\":{\"params\":{\"commitmentHash\":\"contains the commitmentHash signed by the validator(s)\",\"validatorClaimsBitfield\":\"a bitfield containing a membership status of each validator who has claimed to have signed the commitmentHash\",\"validatorPosition\":\"the position of the validator, index starting at 0\",\"validatorPublicKey\":\"the public key of the validator\",\"validatorPublicKeyMerkleProof\":\"proof required for validation of the public key in the validator merkle tree\",\"validatorSignature\":\"the signature of one validator\"}},\"verifyBeefyMerkleLeaf(bytes32,(bytes32[],uint64))\":{\"params\":{\"beefyMMRLeaf\":\"contains the merkle leaf to be verified\",\"proof\":\"contains simplified mmr proof\"}}},\"title\":\"A entry contract for the Ethereum light client\",\"version\":1},\"userdoc\":{\"events\":{\"FinalVerificationSuccessful(address,uint256)\":{\"notice\":\"Notifies an observer that the complete verification process has  finished successfuly and the new commitmentHash will be accepted\"},\"InitialVerificationSuccessful(address,uint256,uint256)\":{\"notice\":\"Notifies an observer that the prover's attempt at initital verification was successful.\"}},\"kind\":\"user\",\"methods\":{\"completeSignatureCommitment(uint256,(uint32,uint64,(bytes32,bytes,bytes)),(bytes[],uint256[],address[],bytes32[][]),(uint8,uint32,bytes32,uint64,uint32,bytes32,bytes32),(bytes32[],uint64))\":{\"notice\":\"Performs the second step in the validation logic\"},\"constructor\":{\"notice\":\"Deploys the BeefyLightClient contract\"},\"newSignatureCommitment(bytes32,uint256[],bytes,uint256,address,bytes32[])\":{\"notice\":\"Executed by the prover in order to begin the process of block acceptance by the light client\"},\"verifyBeefyMerkleLeaf(bytes32,(bytes32[],uint64))\":{\"notice\":\"Executed by the incoming channel in order to verify commitment\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@snowfork/snowbridge-contracts/contracts/BeefyLightClient.sol\":\"BeefyLightClient\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Divide the signature in r, s and v variables\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n        } else if (signature.length == 64) {\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                let vs := mload(add(signature, 0x40))\\n                r := mload(add(signature, 0x20))\\n                s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n                v := add(shr(255, vs), 27)\\n            }\\n        } else {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n\\n        return recover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (282): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \\\"ECDSA: invalid signature 's' value\\\");\\n        require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x2b7a01bbc90040fd4a48bc143ac5a192da3b9bfc559ac08a78eaca40bf49e436\",\"license\":\"MIT\"},\"@snowfork/snowbridge-contracts/contracts/BeefyLightClient.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"./utils/Bits.sol\\\";\\nimport \\\"./utils/Bitfield.sol\\\";\\nimport \\\"./ValidatorRegistry.sol\\\";\\nimport \\\"./SimplifiedMMRVerification.sol\\\";\\nimport \\\"./ScaleCodec.sol\\\";\\n\\n/**\\n * @title A entry contract for the Ethereum light client\\n */\\ncontract BeefyLightClient {\\n    using Bits for uint256;\\n    using Bitfield for uint256[];\\n    using ScaleCodec for uint256;\\n    using ScaleCodec for uint64;\\n    using ScaleCodec for uint32;\\n    using ScaleCodec for uint16;\\n\\n    /* Events */\\n\\n    /**\\n     * @notice Notifies an observer that the prover's attempt at initital\\n     * verification was successful.\\n     * @dev Note that the prover must wait until `n` blocks have been mined\\n     * subsequent to the generation of this event before the 2nd tx can be sent\\n     * @param prover The address of the calling prover\\n     * @param blockNumber The blocknumber in which the initial validation\\n     * succeeded\\n     * @param id An identifier to provide disambiguation\\n     */\\n    event InitialVerificationSuccessful(\\n        address prover,\\n        uint256 blockNumber,\\n        uint256 id\\n    );\\n\\n    /**\\n     * @notice Notifies an observer that the complete verification process has\\n     *  finished successfuly and the new commitmentHash will be accepted\\n     * @param prover The address of the successful prover\\n     * @param id the identifier used\\n     */\\n    event FinalVerificationSuccessful(address prover, uint256 id);\\n\\n    event NewMMRRoot(bytes32 mmrRoot, uint64 blockNumber);\\n\\n    /* Types */\\n\\n    /**\\n     * The Commitment, with its payload, is the core thing we are trying to verify with\\n     * this contract. It contains a MMR root that commits to the polkadot history, including\\n     * past blocks and parachain blocks and can be used to verify both polkadot and parachain blocks.\\n     * @param payload the payload of the new commitment in beefy justifications (in\\n     * our case, this is a new MMR root for all past polkadot blocks)\\n     * @param blockNumber block number for the given commitment\\n     * @param validatorSetId validator set id that signed the given commitment\\n     */\\n    struct Commitment {\\n        uint32 blockNumber;\\n        uint64 validatorSetId;\\n        Payload payload;\\n    }\\n\\n    struct Payload {\\n        bytes32 mmrRootHash;\\n        bytes prefix;\\n        bytes suffix;\\n    }\\n\\n    /**\\n     * The ValidatorProof is a collection of proofs used to verify the signatures from the validators signing\\n     * each new justification.\\n     * @param signatures an array of signatures from the randomly chosen validators\\n     * @param positions an array of the positions of the randomly chosen validators\\n     * @param publicKeys an array of the public key of each signer\\n     * @param publicKeyMerkleProofs an array of merkle proofs from the chosen validators proving that their public\\n     * keys are in the validator set\\n     */\\n    struct ValidatorProof {\\n        bytes[] signatures;\\n        uint256[] positions;\\n        address[] publicKeys;\\n        bytes32[][] publicKeyMerkleProofs;\\n    }\\n\\n    /**\\n     * The ValidationData is the set of data used to link each pair of initial and complete verification transactions.\\n     * @param senderAddress the sender of the initial transaction\\n     * @param commitmentHash the hash of the commitment they are claiming has been signed\\n     * @param validatorClaimsBitfield a bitfield signalling which validators they claim have signed\\n     * @param blockNumber the block number for this commitment\\n     */\\n    struct ValidationData {\\n        address senderAddress;\\n        bytes32 commitmentHash;\\n        uint256[] validatorClaimsBitfield;\\n        uint256 blockNumber;\\n    }\\n\\n    /**\\n     * The BeefyMMRLeaf is the structure of each leaf in each MMR that each commitment's payload commits to.\\n     * @param version version of the leaf type\\n     * @param parentNumber parent number of the block this leaf describes\\n     * @param parentHash parent hash of the block this leaf describes\\n     * @param parachainHeadsRoot merkle root of all parachain headers in this block\\n     * @param nextAuthoritySetId validator set id that will be part of consensus for the next block\\n     * @param nextAuthoritySetLen length of that validator set\\n     * @param nextAuthoritySetRoot merkle root of all public keys in that validator set\\n     */\\n    struct BeefyMMRLeaf {\\n        uint8 version;\\n        uint32 parentNumber;\\n        bytes32 parentHash;\\n        uint64 nextAuthoritySetId;\\n        uint32 nextAuthoritySetLen;\\n        bytes32 nextAuthoritySetRoot;\\n        bytes32 parachainHeadsRoot;\\n    }\\n\\n    /* State */\\n\\n    ValidatorRegistry public validatorRegistry;\\n    SimplifiedMMRVerification public mmrVerification;\\n    uint256 public currentId;\\n    bytes32 public latestMMRRoot;\\n    uint64 public latestBeefyBlock;\\n    mapping(uint256 => ValidationData) public validationData;\\n\\n    /* Constants */\\n\\n    // THRESHOLD_NUMERATOR - numerator for percent of validator signatures required\\n    // THRESHOLD_DENOMINATOR - denominator for percent of validator signatures required\\n    uint256 public constant THRESHOLD_NUMERATOR = 3;\\n    uint256 public constant THRESHOLD_DENOMINATOR = 250;\\n    uint64 public constant BLOCK_WAIT_PERIOD = 3;\\n\\n    // We must ensure at least one block is processed every session,\\n    // so these constants are checked to enforce a maximum gap between commitments.\\n    uint64 public constant NUMBER_OF_BLOCKS_PER_SESSION = 2400;\\n    uint64 public constant ERROR_AND_SAFETY_BUFFER = 10;\\n    uint64 public constant MAXIMUM_BLOCK_GAP =\\n        NUMBER_OF_BLOCKS_PER_SESSION - ERROR_AND_SAFETY_BUFFER;\\n\\n    /**\\n     * @notice Deploys the BeefyLightClient contract\\n     * @param _validatorRegistry The contract to be used as the validator registry\\n     * @param _mmrVerification The contract to be used for MMR verification\\n     */\\n    constructor(\\n        ValidatorRegistry _validatorRegistry,\\n        SimplifiedMMRVerification _mmrVerification,\\n        uint64 _startingBeefyBlock\\n    ) {\\n        validatorRegistry = _validatorRegistry;\\n        mmrVerification = _mmrVerification;\\n        currentId = 0;\\n        latestBeefyBlock = _startingBeefyBlock;\\n    }\\n\\n    /* Public Functions */\\n\\n    /**\\n     * @notice Executed by the incoming channel in order to verify commitment\\n     * @param beefyMMRLeaf contains the merkle leaf to be verified\\n     * @param proof contains simplified mmr proof\\n     */\\n    function verifyBeefyMerkleLeaf(\\n        bytes32 beefyMMRLeaf,\\n        SimplifiedMMRProof memory proof\\n    ) external view returns (bool) {\\n        return\\n            mmrVerification.verifyInclusionProof(\\n                latestMMRRoot,\\n                beefyMMRLeaf,\\n                proof\\n            );\\n    }\\n\\n    /**\\n     * @notice Executed by the prover in order to begin the process of block\\n     * acceptance by the light client\\n     * @param commitmentHash contains the commitmentHash signed by the validator(s)\\n     * @param validatorClaimsBitfield a bitfield containing a membership status of each\\n     * validator who has claimed to have signed the commitmentHash\\n     * @param validatorSignature the signature of one validator\\n     * @param validatorPosition the position of the validator, index starting at 0\\n     * @param validatorPublicKey the public key of the validator\\n     * @param validatorPublicKeyMerkleProof proof required for validation of the public key in the validator merkle tree\\n     */\\n    function newSignatureCommitment(\\n        bytes32 commitmentHash,\\n        uint256[] memory validatorClaimsBitfield,\\n        bytes memory validatorSignature,\\n        uint256 validatorPosition,\\n        address validatorPublicKey,\\n        bytes32[] calldata validatorPublicKeyMerkleProof\\n    ) public payable {\\n        /**\\n         * @dev Check if validatorPublicKeyMerkleProof is valid based on ValidatorRegistry merkle root\\n         */\\n        require(\\n            validatorRegistry.checkValidatorInSet(\\n                validatorPublicKey,\\n                validatorPosition,\\n                validatorPublicKeyMerkleProof\\n            ),\\n            \\\"Error: Sender must be in validator set at correct position\\\"\\n        );\\n\\n        /**\\n         * @dev Check if validatorSignature is correct, ie. check if it matches\\n         * the signature of senderPublicKey on the commitmentHash\\n         */\\n        require(\\n            ECDSA.recover(commitmentHash, validatorSignature) ==\\n                validatorPublicKey,\\n            \\\"Error: Invalid Signature\\\"\\n        );\\n\\n        /**\\n         * @dev Check that the bitfield actually contains enough claims to be succesful, ie, >= 2/3\\n         */\\n        require(\\n            validatorClaimsBitfield.countSetBits() >=\\n                requiredNumberOfSignatures(),\\n            \\\"Error: Bitfield not enough validators\\\"\\n        );\\n\\n        // Accept and save the commitment\\n        validationData[currentId] = ValidationData(\\n            msg.sender,\\n            commitmentHash,\\n            validatorClaimsBitfield,\\n            block.number\\n        );\\n\\n        emit InitialVerificationSuccessful(msg.sender, block.number, currentId);\\n\\n        currentId = currentId + 1;\\n    }\\n\\n    function createRandomBitfield(uint256 id)\\n        public\\n        view\\n        returns (uint256[] memory)\\n    {\\n        ValidationData storage data = validationData[id];\\n\\n        /**\\n         * @dev verify that block wait period has passed\\n         */\\n        require(\\n            block.number >= data.blockNumber + BLOCK_WAIT_PERIOD,\\n            \\\"Error: Block wait period not over\\\"\\n        );\\n\\n        uint256 numberOfValidators = validatorRegistry.numOfValidators();\\n\\n        return\\n            Bitfield.randomNBitsWithPriorCheck(\\n                getSeed(data),\\n                data.validatorClaimsBitfield,\\n                requiredNumberOfSignatures(numberOfValidators),\\n                numberOfValidators\\n            );\\n    }\\n\\n    function createInitialBitfield(uint256[] calldata bitsToSet, uint256 length)\\n        public\\n        pure\\n        returns (uint256[] memory)\\n    {\\n        return Bitfield.createBitfield(bitsToSet, length);\\n    }\\n\\n    /**\\n     * @notice Performs the second step in the validation logic\\n     * @param id an identifying value generated in the previous transaction\\n     * @param commitment contains the full commitment that was used for the commitmentHash\\n     * @param validatorProof a struct containing the data needed to verify all validator signatures\\n     */\\n    function completeSignatureCommitment(\\n        uint256 id,\\n        Commitment calldata commitment,\\n        ValidatorProof calldata validatorProof,\\n        BeefyMMRLeaf calldata latestMMRLeaf,\\n        SimplifiedMMRProof calldata proof\\n    ) public {\\n        verifyCommitment(id, commitment, validatorProof);\\n        verifyNewestMMRLeaf(\\n            latestMMRLeaf,\\n            commitment.payload.mmrRootHash,\\n            proof\\n        );\\n\\n        processPayload(commitment.payload.mmrRootHash, commitment.blockNumber);\\n\\n        applyValidatorSetChanges(\\n            latestMMRLeaf.nextAuthoritySetId,\\n            latestMMRLeaf.nextAuthoritySetLen,\\n            latestMMRLeaf.nextAuthoritySetRoot\\n        );\\n\\n        emit FinalVerificationSuccessful(msg.sender, id);\\n\\n        /**\\n         * @dev We no longer need the data held in state, so delete it for a gas refund\\n         */\\n        delete validationData[id];\\n    }\\n\\n    /* Private Functions */\\n\\n\\n    /**\\n     * @notice Deterministically generates a seed from the block hash at the block number of creation of the validation\\n     * data plus MAXIMUM_NUM_SIGNERS\\n     * @dev Note that `blockhash(blockNum)` will only work for the 256 most recent blocks. If\\n     * `completeSignatureCommitment` is called too late, a new call to `newSignatureCommitment` is necessary to reset\\n     * validation data's block number\\n     * @param data a storage reference to the validationData struct\\n     * @return onChainRandNums an array storing the random numbers generated inside this function\\n     */\\n    function getSeed(ValidationData storage data)\\n        private\\n        view\\n        returns (uint256)\\n    {\\n        // @note Get payload.blocknumber, add BLOCK_WAIT_PERIOD\\n        uint256 randomSeedBlockNum = data.blockNumber + BLOCK_WAIT_PERIOD;\\n        // @note Create a hash seed from the block number\\n        bytes32 randomSeedBlockHash = blockhash(randomSeedBlockNum);\\n\\n        return uint256(randomSeedBlockHash);\\n    }\\n\\n    function verifyNewestMMRLeaf(\\n        BeefyMMRLeaf calldata leaf,\\n        bytes32 root,\\n        SimplifiedMMRProof calldata proof\\n    ) public view {\\n        bytes memory encodedLeaf = encodeMMRLeaf(leaf);\\n        bytes32 hashedLeaf = keccak256(encodedLeaf);\\n\\n        require(\\n            mmrVerification.verifyInclusionProof(root, hashedLeaf, proof),\\n            \\\"Invalid proof\\\"\\n        );\\n    }\\n\\n    /**\\n     * @notice Perform some operation[s] using the payload\\n     * @param payload The payload variable passed in via the initial function\\n     */\\n    function processPayload(bytes32 payload, uint64 blockNumber) private {\\n        // Check that payload.leaf.block_number is > last_known_block_number;\\n        require(\\n            blockNumber > latestBeefyBlock,\\n            \\\"Payload blocknumber is too old\\\"\\n        );\\n\\n        // Check that payload is within the current or next session\\n        // to ensure we get at least one payload each session\\n        require(\\n            blockNumber < latestBeefyBlock + MAXIMUM_BLOCK_GAP,\\n            \\\"Payload blocknumber is too new\\\"\\n        );\\n\\n        latestMMRRoot = payload;\\n        latestBeefyBlock = blockNumber;\\n        emit NewMMRRoot(latestMMRRoot, blockNumber);\\n    }\\n\\n    /**\\n     * @notice Check if the payload includes a new validator set,\\n     * and if it does then update the new validator set\\n     * @dev This function should call out to the validator registry contract\\n     * @param nextAuthoritySetId The id of the next authority set\\n     * @param nextAuthoritySetLen The number of validators in the next authority set\\n     * @param nextAuthoritySetRoot The merkle root of the merkle tree of the next validators\\n     */\\n    function applyValidatorSetChanges(\\n        uint64 nextAuthoritySetId,\\n        uint32 nextAuthoritySetLen,\\n        bytes32 nextAuthoritySetRoot\\n    ) internal {\\n        if (nextAuthoritySetId != validatorRegistry.id()) {\\n            validatorRegistry.update(\\n                nextAuthoritySetRoot,\\n                nextAuthoritySetLen,\\n                nextAuthoritySetId\\n            );\\n        }\\n    }\\n\\n    function requiredNumberOfSignatures() public view returns (uint256) {\\n        return\\n            (validatorRegistry.numOfValidators() *\\n                THRESHOLD_NUMERATOR +\\n                THRESHOLD_DENOMINATOR -\\n                1) / THRESHOLD_DENOMINATOR;\\n    }\\n\\n    function requiredNumberOfSignatures(uint256 numValidators)\\n        public\\n        pure\\n        returns (uint256)\\n    {\\n        return\\n            (numValidators * THRESHOLD_NUMERATOR + THRESHOLD_DENOMINATOR - 1) /\\n            THRESHOLD_DENOMINATOR;\\n    }\\n\\n    function verifyCommitment(\\n        uint256 id,\\n        Commitment calldata commitment,\\n        ValidatorProof calldata proof\\n    ) internal view {\\n        ValidationData storage data = validationData[id];\\n\\n        // Verify that sender is the same as in `newSignatureCommitment`\\n        require(\\n            msg.sender == data.senderAddress,\\n            \\\"Error: Sender address does not match original validation data\\\"\\n        );\\n\\n        uint256 numberOfValidators = validatorRegistry.numOfValidators();\\n        uint256 requiredNumOfSignatures = requiredNumberOfSignatures(\\n            numberOfValidators\\n        );\\n\\n        /**\\n         * @dev verify that block wait period has passed\\n         */\\n        require(\\n            block.number >= data.blockNumber + BLOCK_WAIT_PERIOD,\\n            \\\"Error: Block wait period not over\\\"\\n        );\\n\\n        uint256[] memory randomBitfield = Bitfield.randomNBitsWithPriorCheck(\\n            getSeed(data),\\n            data.validatorClaimsBitfield,\\n            requiredNumOfSignatures,\\n            numberOfValidators\\n        );\\n\\n        verifyValidatorProofLengths(requiredNumOfSignatures, proof);\\n\\n        verifyValidatorProofSignatures(\\n            randomBitfield,\\n            proof,\\n            requiredNumOfSignatures,\\n            commitment\\n        );\\n    }\\n\\n    function verifyValidatorProofLengths(\\n        uint256 requiredNumOfSignatures,\\n        ValidatorProof calldata proof\\n    ) internal pure {\\n        /**\\n         * @dev verify that required number of signatures, positions, public keys and merkle proofs are\\n         * submitted\\n         */\\n        require(\\n            proof.signatures.length == requiredNumOfSignatures,\\n            \\\"Error: Number of signatures does not match required\\\"\\n        );\\n        require(\\n            proof.positions.length == requiredNumOfSignatures,\\n            \\\"Error: Number of validator positions does not match required\\\"\\n        );\\n        require(\\n            proof.publicKeys.length == requiredNumOfSignatures,\\n            \\\"Error: Number of validator public keys does not match required\\\"\\n        );\\n        require(\\n            proof.publicKeyMerkleProofs.length == requiredNumOfSignatures,\\n            \\\"Error: Number of validator public keys does not match required\\\"\\n        );\\n    }\\n\\n    function verifyValidatorProofSignatures(\\n        uint256[] memory randomBitfield,\\n        ValidatorProof calldata proof,\\n        uint256 requiredNumOfSignatures,\\n        Commitment calldata commitment\\n    ) internal view {\\n        // Encode and hash the commitment\\n        bytes memory encodedCommitment = encodeCommitment(commitment);\\n        bytes32 commitmentHash = keccak256(encodedCommitment);\\n\\n        /**\\n         *  @dev For each randomSignature, do:\\n         */\\n        for (uint256 i = 0; i < requiredNumOfSignatures; i++) {\\n            verifyValidatorSignature(\\n                randomBitfield,\\n                proof.signatures[i],\\n                proof.positions[i],\\n                proof.publicKeys[i],\\n                proof.publicKeyMerkleProofs[i],\\n                commitmentHash\\n            );\\n        }\\n    }\\n\\n    function verifyValidatorSignature(\\n        uint256[] memory randomBitfield,\\n        bytes calldata signature,\\n        uint256 position,\\n        address publicKey,\\n        bytes32[] calldata publicKeyMerkleProof,\\n        bytes32 commitmentHash\\n    ) internal view {\\n        /**\\n         * @dev Check if validator in randomBitfield\\n         */\\n        require(\\n            randomBitfield.isSet(position),\\n            \\\"Error: Validator must be once in bitfield\\\"\\n        );\\n\\n        /**\\n         * @dev Remove validator from randomBitfield such that no validator can appear twice in signatures\\n         */\\n        randomBitfield.clear(position);\\n\\n        /**\\n         * @dev Check if merkle proof is valid\\n         */\\n        require(\\n            validatorRegistry.checkValidatorInSet(\\n                publicKey,\\n                position,\\n                publicKeyMerkleProof\\n            ),\\n            \\\"Error: Validator must be in validator set at correct position\\\"\\n        );\\n\\n        /**\\n         * @dev Check if signature is correct\\n         */\\n        require(\\n            ECDSA.recover(commitmentHash, signature) == publicKey,\\n            \\\"Error: Invalid Signature\\\"\\n        );\\n    }\\n\\n    function encodeCommitment(Commitment calldata commitment)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return bytes.concat(\\n            commitment.payload.prefix,\\n            commitment.payload.mmrRootHash,\\n            commitment.payload.suffix,\\n            commitment.blockNumber.encode32(),\\n            commitment.validatorSetId.encode64()\\n        );\\n    }\\n\\n    function encodeMMRLeaf(BeefyMMRLeaf calldata leaf)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return bytes.concat(\\n            ScaleCodec.encode8(leaf.version),\\n            ScaleCodec.encode32(leaf.parentNumber),\\n            leaf.parentHash,\\n            ScaleCodec.encode64(leaf.nextAuthoritySetId),\\n            ScaleCodec.encode32(leaf.nextAuthoritySetLen),\\n            leaf.nextAuthoritySetRoot,\\n            leaf.parachainHeadsRoot\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xd5a0a4610a3002a84bb67bf7681caa04887a69eab5ff8433f7d6c45a75787423\",\"license\":\"Apache-2.0\"},\"@snowfork/snowbridge-contracts/contracts/ScaleCodec.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity >=0.7.6;\\n\\nlibrary ScaleCodec {\\n\\n    // Sources:\\n    //   * https://ethereum.stackexchange.com/questions/15350/how-to-convert-an-bytes-to-address-in-solidity/50528\\n    //   * https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\\n\\n    function reverse256(uint256 input) internal pure returns (uint256 v) {\\n        v = input;\\n\\n        // swap bytes\\n        v = ((v & 0xFF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00) >> 8) |\\n            ((v & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) << 8);\\n\\n        // swap 2-byte long pairs\\n        v = ((v & 0xFFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000) >> 16) |\\n            ((v & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) << 16);\\n\\n        // swap 4-byte long pairs\\n        v = ((v & 0xFFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000) >> 32) |\\n            ((v & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) << 32);\\n\\n        // swap 8-byte long pairs\\n        v = ((v & 0xFFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF0000000000000000) >> 64) |\\n            ((v & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) << 64);\\n\\n        // swap 16-byte long pairs\\n        v = (v >> 128) | (v << 128);\\n    }\\n\\n    function reverse128(uint128 input) internal pure returns (uint128 v) {\\n        v = input;\\n\\n        // swap bytes\\n        v = ((v & 0xFF00FF00FF00FF00FF00FF00FF00FF00) >> 8) |\\n            ((v & 0x00FF00FF00FF00FF00FF00FF00FF00FF) << 8);\\n\\n        // swap 2-byte long pairs\\n        v = ((v & 0xFFFF0000FFFF0000FFFF0000FFFF0000) >> 16) |\\n            ((v & 0x0000FFFF0000FFFF0000FFFF0000FFFF) << 16);\\n\\n        // swap 4-byte long pairs\\n        v = ((v & 0xFFFFFFFF00000000FFFFFFFF00000000) >> 32) |\\n            ((v & 0x00000000FFFFFFFF00000000FFFFFFFF) << 32);\\n\\n        // swap 8-byte long pairs\\n        v = (v >> 64) | (v << 64);\\n    }\\n\\n    function reverse64(uint64 input) internal pure returns (uint64 v) {\\n        v = input;\\n\\n        // swap bytes\\n        v = ((v & 0xFF00FF00FF00FF00) >> 8) |\\n            ((v & 0x00FF00FF00FF00FF) << 8);\\n\\n        // swap 2-byte long pairs\\n        v = ((v & 0xFFFF0000FFFF0000) >> 16) |\\n            ((v & 0x0000FFFF0000FFFF) << 16);\\n\\n        // swap 4-byte long pairs\\n        v = (v >> 32) | (v << 32);\\n    }\\n\\n    function reverse32(uint32 input) internal pure returns (uint32 v) {\\n        v = input;\\n\\n        // swap bytes\\n        v = ((v & 0xFF00FF00) >> 8) |\\n            ((v & 0x00FF00FF) << 8);\\n\\n        // swap 2-byte long pairs\\n        v = (v >> 16) | (v << 16);\\n    }\\n\\n    function reverse16(uint16 input) internal pure returns (uint16 v) {\\n        v = input;\\n\\n        // swap bytes\\n        v = (v >> 8) | (v << 8);\\n    }\\n\\n    function encode256(uint256 input) public pure returns (bytes32) {\\n        return bytes32(reverse256(input));\\n    }\\n\\n    function encode128(uint128 input) public pure returns (bytes16) {\\n        return bytes16(reverse128(input));\\n    }\\n\\n    function encode64(uint64 input) public pure returns (bytes8) {\\n        return bytes8(reverse64(input));\\n    }\\n\\n    function encode32(uint32 input) public pure returns (bytes4) {\\n        return bytes4(reverse32(input));\\n    }\\n\\n    function encode16(uint16 input) public pure returns (bytes2) {\\n        return bytes2(reverse16(input));\\n    }\\n\\n    function encode8(uint8 input) public pure returns (bytes1) {\\n        return bytes1(input);\\n    }\\n}\\n\",\"keccak256\":\"0x155f967fb8badeb5eadfde5255c55911e18e6886174bf81afb15df2fbb9fdb62\",\"license\":\"Apache-2.0\"},\"@snowfork/snowbridge-contracts/contracts/SimplifiedMMRVerification.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity ^0.8.5;\\n\\nstruct SimplifiedMMRProof {\\n    bytes32[] merkleProofItems;\\n    uint64 merkleProofOrderBitField;\\n}\\n\\ncontract  SimplifiedMMRVerification {\\n    function verifyInclusionProof(\\n        bytes32 root,\\n        bytes32 leafNodeHash,\\n        SimplifiedMMRProof memory proof\\n    ) public pure returns (bool) {\\n        require(proof.merkleProofItems.length < 64);\\n\\n        return root == calculateMerkleRoot(leafNodeHash, proof.merkleProofItems, proof.merkleProofOrderBitField);\\n    }\\n\\n    // Get the value of the bit at the given 'index' in 'self'.\\n    // index should be validated beforehand to make sure it is less than 64\\n    function bit(uint64 self, uint index) internal pure returns (bool) {\\n        if (uint8(self >> index & 1) == 1) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function calculateMerkleRoot(\\n        bytes32 leafNodeHash,\\n        bytes32[] memory merkleProofItems,\\n        uint64 merkleProofOrderBitField\\n    ) internal pure returns (bytes32) {\\n        bytes32 currentHash = leafNodeHash;\\n\\n        for (uint currentPosition = 0; currentPosition < merkleProofItems.length; currentPosition++) {\\n            bool isSiblingLeft = bit(merkleProofOrderBitField, currentPosition);\\n            bytes32 sibling = merkleProofItems[currentPosition];\\n\\n            if (isSiblingLeft) {\\n                currentHash = keccak256(\\n                    abi.encodePacked(sibling, currentHash)\\n                );\\n            } else {\\n                currentHash = keccak256(\\n                    abi.encodePacked(currentHash, sibling)\\n                );\\n            }\\n        }\\n\\n        return currentHash;\\n    }\\n}\\n\",\"keccak256\":\"0xdb3259cc2f8e2ff32507a480f2ea9d3801cf3fc828ea0330bdff2a17be2b9353\",\"license\":\"UNLICENSED\"},\"@snowfork/snowbridge-contracts/contracts/ValidatorRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./utils/MerkleProof.sol\\\";\\n\\n/**\\n * @title A contract storing state on the current validator set\\n * @dev Stores the validator set as a Merkle root\\n * @dev Inherits `Ownable` to ensure it can only be callable by the\\n * instantiating contract account (which is the BeefyLightClient contract)\\n */\\ncontract ValidatorRegistry is Ownable {\\n    /* Events */\\n\\n    event ValidatorRegistryUpdated(\\n        bytes32 root,\\n        uint256 numOfValidators,\\n        uint64 id\\n    );\\n\\n    /* State */\\n\\n    bytes32 public root;\\n    uint256 public numOfValidators;\\n    uint64 public id;\\n\\n    /**\\n     * @notice Updates the validator registry and number of validators\\n     * @param _root The new root\\n     * @param _numOfValidators The new number of validators\\n     */\\n    function update(\\n        bytes32 _root,\\n        uint256 _numOfValidators,\\n        uint64 _id\\n    ) public onlyOwner {\\n        root = _root;\\n        numOfValidators = _numOfValidators;\\n        id = _id;\\n        emit ValidatorRegistryUpdated(_root, _numOfValidators, _id);\\n    }\\n\\n    /**\\n     * @notice Checks if a validators address is a member of the merkle tree\\n     * @param addr The address of the validator to check\\n     * @param pos The position of the validator to check, index starting at 0\\n     * @param proof Merkle proof required for validation of the address\\n     * @return Returns true if the validator is in the set\\n     */\\n    function checkValidatorInSet(\\n        address addr,\\n        uint256 pos,\\n        bytes32[] memory proof\\n    ) public view returns (bool) {\\n        bytes32 hashedLeaf = keccak256(abi.encodePacked(addr));\\n        return\\n            MerkleProof.verifyMerkleLeafAtPosition(\\n                root,\\n                hashedLeaf,\\n                pos,\\n                numOfValidators,\\n                proof\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x5a55d9052bf1f9a8f6ae57574a1d029b16b8909677297fd2ee7b9f021b171fc6\",\"license\":\"Apache-2.0\"},\"@snowfork/snowbridge-contracts/contracts/utils/Bitfield.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.8.5;\\n\\nimport \\\"./Bits.sol\\\";\\n\\nlibrary Bitfield {\\n    /**\\n     * @dev Constants used to efficiently calculate the hamming weight of a bitfield. See\\n     * https://en.wikipedia.org/wiki/Hamming_weight#Efficient_implementation for an explanation of those constants.\\n     */\\n    uint256 internal constant M1 =\\n        0x5555555555555555555555555555555555555555555555555555555555555555;\\n    uint256 internal constant M2 =\\n        0x3333333333333333333333333333333333333333333333333333333333333333;\\n    uint256 internal constant M4 =\\n        0x0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f;\\n    uint256 internal constant M8 =\\n        0x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff;\\n    uint256 internal constant M16 =\\n        0x0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff;\\n    uint256 internal constant M32 =\\n        0x00000000ffffffff00000000ffffffff00000000ffffffff00000000ffffffff;\\n    uint256 internal constant M64 =\\n        0x0000000000000000ffffffffffffffff0000000000000000ffffffffffffffff;\\n    uint256 internal constant M128 =\\n        0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff;\\n\\n    uint256 internal constant ONE = uint256(1);\\n    using Bits for uint256;\\n\\n    /**\\n     * @notice Draws a random number, derives an index in the bitfield, and sets the bit if it is in the `prior` and not\\n     * yet set. Repeats that `n` times.\\n     */\\n    function randomNBitsWithPriorCheck(\\n        uint256 seed,\\n        uint256[] memory prior,\\n        uint256 n,\\n        uint256 length\\n    ) public pure returns (uint256[] memory bitfield) {\\n        require(\\n            n <= countSetBits(prior),\\n            \\\"`n` must be <= number of set bits in `prior`\\\"\\n        );\\n\\n        bitfield = new uint256[](prior.length);\\n        uint256 found = 0;\\n\\n        for (uint256 i = 0; found < n; i++) {\\n            bytes32 randomness = keccak256(abi.encode(seed + i));\\n            uint256 index = uint256(randomness) % length;\\n\\n            // require randomly seclected bit to be set in prior\\n            if (!isSet(prior, index)) {\\n                continue;\\n            }\\n\\n            // require a not yet set (new) bit to be set\\n            if (isSet(bitfield, index)) {\\n                continue;\\n            }\\n\\n            set(bitfield, index);\\n\\n            found++;\\n        }\\n\\n        return bitfield;\\n    }\\n\\n    function createBitfield(uint256[] calldata bitsToSet, uint256 length)\\n        public\\n        pure\\n        returns (uint256[] memory bitfield)\\n    {\\n        // Calculate length of uint256 array based on rounding up to number of uint256 needed\\n        uint256 arrayLength = (length + 255) / 256;\\n\\n        bitfield = new uint256[](arrayLength);\\n\\n        for (uint256 i = 0; i < bitsToSet.length; i++) {\\n            set(bitfield, bitsToSet[i]);\\n        }\\n\\n        return bitfield;\\n    }\\n\\n    /**\\n     * @notice Calculates the number of set bits by using the hamming weight of the bitfield.\\n     * The alogrithm below is implemented after https://en.wikipedia.org/wiki/Hamming_weight#Efficient_implementation.\\n     * Further improvements are possible, see the article above.\\n     */\\n    function countSetBits(uint256[] memory self) public pure returns (uint256) {\\n        uint256 count = 0;\\n        for (uint256 i = 0; i < self.length; i++) {\\n            uint256 x = self[i];\\n\\n            x = (x & M1) + ((x >> 1) & M1); //put count of each  2 bits into those  2 bits\\n            x = (x & M2) + ((x >> 2) & M2); //put count of each  4 bits into those  4 bits\\n            x = (x & M4) + ((x >> 4) & M4); //put count of each  8 bits into those  8 bits\\n            x = (x & M8) + ((x >> 8) & M8); //put count of each 16 bits into those 16 bits\\n            x = (x & M16) + ((x >> 16) & M16); //put count of each 32 bits into those 32 bits\\n            x = (x & M32) + ((x >> 32) & M32); //put count of each 64 bits into those 64 bits\\n            x = (x & M64) + ((x >> 64) & M64); //put count of each 128 bits into those 128 bits\\n            x = (x & M128) + ((x >> 128) & M128); //put count of each 256 bits into those 256 bits\\n            count += x;\\n        }\\n        return count;\\n    }\\n\\n    function isSet(uint256[] memory self, uint256 index)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        uint256 element = index / 256;\\n        uint8 within = uint8(index % 256);\\n        return self[element].bit(within) == 1;\\n    }\\n\\n    function set(uint256[] memory self, uint256 index) internal pure {\\n        uint256 element = index / 256;\\n        uint8 within = uint8(index % 256);\\n        self[element] = self[element].setBit(within);\\n    }\\n\\n    function clear(uint256[] memory self, uint256 index) internal pure {\\n        uint256 element = index / 256;\\n        uint8 within = uint8(index % 256);\\n        self[element] = self[element].clearBit(within);\\n    }\\n}\\n\",\"keccak256\":\"0xe3739730f13bdd93c953d2a949ba35d6f4c6d3401a87396119abdf397d0d238c\",\"license\":\"Apache-2.0\"},\"@snowfork/snowbridge-contracts/contracts/utils/Bits.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n// Code from https://github.com/ethereum/solidity-examples\\npragma solidity >=0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nlibrary Bits {\\n    uint256 internal constant ONE = uint256(1);\\n    uint256 internal constant ONES = type(uint256).max;\\n\\n    // Sets the bit at the given 'index' in 'self' to '1'.\\n    // Returns the modified value.\\n    function setBit(uint256 self, uint8 index) internal pure returns (uint256) {\\n        return self | (ONE << index);\\n    }\\n\\n    // Sets the bit at the given 'index' in 'self' to '0'.\\n    // Returns the modified value.\\n    function clearBit(uint256 self, uint8 index)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return self & ~(ONE << index);\\n    }\\n\\n    // Sets the bit at the given 'index' in 'self' to:\\n    //  '1' - if the bit is '0'\\n    //  '0' - if the bit is '1'\\n    // Returns the modified value.\\n    function toggleBit(uint256 self, uint8 index)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return self ^ (ONE << index);\\n    }\\n\\n    // Get the value of the bit at the given 'index' in 'self'.\\n    function bit(uint256 self, uint8 index) internal pure returns (uint8) {\\n        return uint8((self >> index) & 1);\\n    }\\n\\n    // Check if the bit at the given 'index' in 'self' is set.\\n    // Returns:\\n    //  'true' - if the value of the bit is '1'\\n    //  'false' - if the value of the bit is '0'\\n    function bitSet(uint256 self, uint8 index) internal pure returns (bool) {\\n        return (self >> index) & 1 == 1;\\n    }\\n\\n    // Checks if the bit at the given 'index' in 'self' is equal to the corresponding\\n    // bit in 'other'.\\n    // Returns:\\n    //  'true' - if both bits are '0' or both bits are '1'\\n    //  'false' - otherwise\\n    function bitEqual(\\n        uint256 self,\\n        uint256 other,\\n        uint8 index\\n    ) internal pure returns (bool) {\\n        return ((self ^ other) >> index) & 1 == 0;\\n    }\\n\\n    // Get the bitwise NOT of the bit at the given 'index' in 'self'.\\n    function bitNot(uint256 self, uint8 index) internal pure returns (uint8) {\\n        return uint8(1 - ((self >> index) & 1));\\n    }\\n\\n    // Computes the bitwise AND of the bit at the given 'index' in 'self', and the\\n    // corresponding bit in 'other', and returns the value.\\n    function bitAnd(\\n        uint256 self,\\n        uint256 other,\\n        uint8 index\\n    ) internal pure returns (uint8) {\\n        return uint8(((self & other) >> index) & 1);\\n    }\\n\\n    // Computes the bitwise OR of the bit at the given 'index' in 'self', and the\\n    // corresponding bit in 'other', and returns the value.\\n    function bitOr(\\n        uint256 self,\\n        uint256 other,\\n        uint8 index\\n    ) internal pure returns (uint8) {\\n        return uint8(((self | other) >> index) & 1);\\n    }\\n\\n    // Computes the bitwise XOR of the bit at the given 'index' in 'self', and the\\n    // corresponding bit in 'other', and returns the value.\\n    function bitXor(\\n        uint256 self,\\n        uint256 other,\\n        uint8 index\\n    ) internal pure returns (uint8) {\\n        return uint8(((self ^ other) >> index) & 1);\\n    }\\n\\n    // Gets 'numBits' consecutive bits from 'self', starting from the bit at 'startIndex'.\\n    // Returns the bits as a 'uint'.\\n    // Requires that:\\n    //  - '0 < numBits <= 256'\\n    //  - 'startIndex < 256'\\n    //  - 'numBits + startIndex <= 256'\\n    function bits(\\n        uint256 self,\\n        uint8 startIndex,\\n        uint16 numBits\\n    ) internal pure returns (uint256) {\\n        require(0 < numBits && startIndex < 256 && startIndex + numBits <= 256);\\n        return (self >> startIndex) & (ONES >> (256 - numBits));\\n    }\\n\\n    // Computes the index of the highest bit set in 'self'.\\n    // Returns the highest bit set as an 'uint8'.\\n    // Requires that 'self != 0'.\\n    function highestBitSet(uint256 self) internal pure returns (uint8 highest) {\\n        require(self != 0);\\n        uint256 val = self;\\n        for (uint8 i = 128; i >= 1; i >>= 1) {\\n            if (val & (((ONE << i) - 1) << i) != 0) {\\n                highest += i;\\n                val >>= i;\\n            }\\n        }\\n    }\\n\\n    // Computes the index of the lowest bit set in 'self'.\\n    // Returns the lowest bit set as an 'uint8'.\\n    // Requires that 'self != 0'.\\n    function lowestBitSet(uint256 self) internal pure returns (uint8 lowest) {\\n        require(self != 0);\\n        uint256 val = self;\\n        for (uint8 i = 128; i >= 1; i >>= 1) {\\n            if (val & ((ONE << i) - 1) == 0) {\\n                lowest += i;\\n                val >>= i;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7b033d1b88b5e0bab9ece9907bedc45573ced5c698676f678941d1c77d718ede\",\"license\":\"Apache-2.0\"},\"@snowfork/snowbridge-contracts/contracts/utils/MerkleProof.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.8.5;\\n\\nlibrary MerkleProof {\\n    /**\\n     * @notice Verify that a specific leaf element is part of the Merkle Tree at a specific position in the tree\\n     *\\n     * @param root the root of the merkle tree\\n     * @param leaf the leaf which needs to be proven\\n     * @param pos the position of the leaf, index starting with 0\\n     * @param width the width or number of leaves in the tree\\n     * @param proof the array of proofs to help verify the leaf's membership, ordered from leaf to root\\n     * @return a boolean value representing the success or failure of the operation\\n     */\\n    function verifyMerkleLeafAtPosition(\\n        bytes32 root,\\n        bytes32 leaf,\\n        uint256 pos,\\n        uint256 width,\\n        bytes32[] calldata proof\\n    ) public pure returns (bool) {\\n        bytes32 computedHash = computeRootFromProofAtPosition(\\n            leaf,\\n            pos,\\n            width,\\n            proof\\n        );\\n\\n        return computedHash == root;\\n    }\\n\\n    /**\\n     * @notice Compute the root of a MMR from a leaf and proof\\n     *\\n     * @param leaf the leaf we want to prove\\n     * @param proof an array of nodes to be hashed in order that they should be hashed\\n     * @param side an array of booleans signalling whether the corresponding node should be hashed on the left side or\\n     * the right side of the current hash\\n     */\\n    function computeRootFromProofAndSide(\\n        bytes32 leaf,\\n        bytes32[] calldata proof,\\n        bool[] calldata side\\n    ) public pure returns (bytes32) {\\n        bytes32 node = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            if (side[i]) {\\n                node = keccak256(abi.encodePacked(proof[i], node));\\n            } else {\\n                node = keccak256(abi.encodePacked(node, proof[i]));\\n            }\\n        }\\n        return node;\\n    }\\n\\n    function computeRootFromProofAtPosition(\\n        bytes32 leaf,\\n        uint256 pos,\\n        uint256 width,\\n        bytes32[] calldata proof\\n    ) public pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n\\n        require(pos < width, \\\"Merkle position is too high\\\");\\n\\n        uint256 i = 0;\\n        for (uint256 height = 0; width > 1; height++) {\\n            bool computedHashLeft = pos % 2 == 0;\\n\\n            // check if at rightmost branch and whether the computedHash is left\\n            if (pos + 1 == width && computedHashLeft) {\\n                // there is no sibling and also no element in proofs, so we just go up one layer in the tree\\n                pos /= 2;\\n                width = ((width - 1) / 2) + 1;\\n                continue;\\n            }\\n\\n            require(i < proof.length, \\\"Merkle proof is too short\\\");\\n\\n            bytes32 proofElement = proof[i];\\n\\n            if (computedHashLeft) {\\n                computedHash = keccak256(\\n                    abi.encodePacked(computedHash, proofElement)\\n                );\\n            } else {\\n                computedHash = keccak256(\\n                    abi.encodePacked(proofElement, computedHash)\\n                );\\n            }\\n\\n            pos /= 2;\\n            width = ((width - 1) / 2) + 1;\\n            i++;\\n        }\\n\\n        return computedHash;\\n    }\\n}\\n\",\"keccak256\":\"0xd2adb5e9f48b705bf33c8151ba8f818ee2cd04047b2b0d8cd2c5f5dbdf479130\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002a7c38038062002a7c83398101604081905262000034916200008c565b600080546001600160a01b03199081166001600160a01b03958616178255600180549091169390941692909217909255600255600480546001600160401b0319166001600160401b0390921691909117905562000104565b600080600060608486031215620000a257600080fd5b8351620000af81620000eb565b6020850151909350620000c281620000eb565b60408501519092506001600160401b0381168114620000e057600080fd5b809150509250925092565b6001600160a01b03811681146200010157600080fd5b50565b61296880620001146000396000f3fe60806040526004361061011f5760003560e01c806372fe1a9f116100a0578063e2a6ff3f11610064578063e2a6ff3f14610371578063e54d154314610387578063ef0244581461039a578063f376ebbb146103af578063fb752c62146103cf57600080fd5b806372fe1a9f146102d9578063801ed1e3146102ee5780639284801614610326578063be7e93a314610346578063e00dd1611461035b57600080fd5b80635a8d2f0e116100e75780635a8d2f0e146102375780635da57fe91461024c57806366ae69a0146102795780636edda8f414610299578063702d5d09146102b957600080fd5b806320bfa5cb14610124578063243d265f146101945780632d268c9e146101b657806341c9634e146101e65780634afad95b1461020a575b600080fd5b34801561013057600080fd5b5061016a61013f36600461223c565b6005602052600090815260409020805460018201546003909201546001600160a01b03909116919083565b604080516001600160a01b0390941684526020840192909252908201526060015b60405180910390f35b3480156101a057600080fd5b506101b46101af3660046121e3565b6103e4565b005b3480156101c257600080fd5b506101d66101d13660046120ab565b6104c7565b604051901515815260200161018b565b3480156101f257600080fd5b506101fc60035481565b60405190815260200161018b565b34801561021657600080fd5b5061021f610555565b6040516001600160401b03909116815260200161018b565b34801561024357600080fd5b506101fc600381565b34801561025857600080fd5b5061026c610267366004611e68565b610565565b60405161018b9190612472565b34801561028557600080fd5b5060045461021f906001600160401b031681565b3480156102a557600080fd5b506101fc6102b436600461223c565b6105ff565b3480156102c557600080fd5b506101b46102d436600461226e565b610635565b3480156102e557600080fd5b506101fc610729565b3480156102fa57600080fd5b5060015461030e906001600160a01b031681565b6040516001600160a01b03909116815260200161018b565b34801561033257600080fd5b5061026c61034136600461223c565b6107e4565b34801561035257600080fd5b5061021f600a81565b34801561036757600080fd5b506101fc60025481565b34801561037d57600080fd5b5061021f61096081565b6101b4610395366004611f9b565b6108fd565b3480156103a657600080fd5b506101fc60fa81565b3480156103bb57600080fd5b5060005461030e906001600160a01b031681565b3480156103db57600080fd5b5061021f600381565b60006103ef84610c1c565b8051602082012060015460405163133b636960e21b815292935090916001600160a01b0390911690634ced8da49061042f908790859088906004016124b6565b60206040518083038186803b15801561044757600080fd5b505afa15801561045b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047f9190611f4f565b6104c05760405162461bcd60e51b815260206004820152600d60248201526c24b73b30b634b210383937b7b360991b60448201526064015b60405180910390fd5b5050505050565b60015460035460405163133b636960e21b81526000926001600160a01b031691634ced8da4916104fe919087908790600401612544565b60206040518083038186803b15801561051657600080fd5b505afa15801561052a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054e9190611f4f565b9392505050565b610562600a61096061286e565b81565b604051630a48684b60e31b815260609073992B9df075935E522EC7950F37eC8557e86f6fdb906352434258906105a39087908790879060040161244e565b60006040518083038186803b1580156105bb57600080fd5b505af41580156105cf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105f79190810190611eb3565b949350505050565b600060fa600181610611600386612838565b61061b91906127e1565b6106259190612857565b61062f9190612824565b92915050565b610640858585610f0a565b610658826106516040870187612746565b35836103e4565b6106816106686040860186612746565b356106766020870187612324565b63ffffffff1661111b565b6106ae610694608084016060850161234a565b6106a460a0850160808601612324565b8460a0013561125e565b60408051338152602081018790527fc128224dd1747f24cc4ecd95248a78fe3b1960b100c9d08ba578888bac274c4e910160405180910390a1600085815260056020526040812080546001600160a01b031916815560018101829055906107186002830182611cc1565b600382016000905550505050505050565b600060fa600160fa600360008054906101000a90046001600160a01b03166001600160a01b0316631e526e456040518163ffffffff1660e01b815260040160206040518083038186803b15801561077f57600080fd5b505afa158015610793573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b79190612255565b6107c19190612838565b6107cb91906127e1565b6107d59190612857565b6107df9190612824565b905090565b600081815260056020526040902060038082015460609291610805916127e1565b4310156108245760405162461bcd60e51b81526004016104b790612619565b60008060009054906101000a90046001600160a01b03166001600160a01b0316631e526e456040518163ffffffff1660e01b815260040160206040518083038186803b15801561087357600080fd5b505afa158015610887573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ab9190612255565b905073992B9df075935E522EC7950F37eC8557e86f6fdb636a4e06636108d084611374565b846002016108dd856105ff565b856040518563ffffffff1660e01b81526004016105a3949392919061265a565b600054604051635d325d7160e01b81526001600160a01b0390911690635d325d7190610933908690889087908790600401612426565b60206040518083038186803b15801561094b57600080fd5b505afa15801561095f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109839190611f4f565b6109f55760405162461bcd60e51b815260206004820152603a60248201527f4572726f723a2053656e646572206d75737420626520696e2076616c6964617460448201527f6f722073657420617420636f727265637420706f736974696f6e00000000000060648201526084016104b7565b826001600160a01b0316610a098887611399565b6001600160a01b031614610a5a5760405162461bcd60e51b81526020600482015260186024820152774572726f723a20496e76616c6964205369676e617475726560401b60448201526064016104b7565b610a62610729565b604051630299641160e51b815273992B9df075935E522EC7950F37eC8557e86f6fdb9063532c822090610a99908a90600401612472565b60206040518083038186803b158015610ab157600080fd5b505af4158015610ac5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae99190612255565b1015610b455760405162461bcd60e51b815260206004820152602560248201527f4572726f723a204269746669656c64206e6f7420656e6f7567682076616c696460448201526461746f727360d81b60648201526084016104b7565b6040805160808101825233815260208082018a81528284018a81524360608501526002805460009081526005855295909520845181546001600160a01b0319166001600160a01b039091161781559151600183015551805193949193610bb393928501929190910190611ce2565b5060609182015160039091015560025460408051338152436020820152908101919091527ff93e67b44fe47465ca1478dbc20efe59702e2fff4b8beecf053817d7ee29fd55910160405180910390a1600254610c109060016127e1565b60025550505050505050565b60607386D9aC0Bab011917f57B9E9607833b4340F9D4F86353fae674610c456020850185612384565b6040516001600160e01b031960e084901b16815260ff909116600482015260240160206040518083038186803b158015610c7e57600080fd5b505af4158015610c92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb69190611f71565b7386D9aC0Bab011917f57B9E9607833b4340F9D4F863381f760d610ce06040860160208701612324565b6040516001600160e01b031960e084901b16815263ffffffff91909116600482015260240160206040518083038186803b158015610d1d57600080fd5b505af4158015610d31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d55919061218f565b60408401357386D9aC0Bab011917f57B9E9607833b4340F9D4F863f83d7d5f610d84608088016060890161234a565b6040516001600160e01b031960e084901b1681526001600160401b03909116600482015260240160206040518083038186803b158015610dc357600080fd5b505af4158015610dd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dfb91906121b9565b7386D9aC0Bab011917f57B9E9607833b4340F9D4F863381f760d610e2560a0890160808a01612324565b6040516001600160e01b031960e084901b16815263ffffffff91909116600482015260240160206040518083038186803b158015610e6257600080fd5b505af4158015610e76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9a919061218f565b6040516001600160f81b031990951660208601526001600160e01b0319938416602186015260258501929092526001600160c01b031916604584015216604d82015260a0830135605182015260c083013560718201526091015b6040516020818303038152906040529050919050565b600083815260056020526040902080546001600160a01b03163314610f975760405162461bcd60e51b815260206004820152603d60248201527f4572726f723a2053656e646572206164647265737320646f6573206e6f74206d60448201527f61746368206f726967696e616c2076616c69646174696f6e206461746100000060648201526084016104b7565b60008060009054906101000a90046001600160a01b03166001600160a01b0316631e526e456040518163ffffffff1660e01b815260040160206040518083038186803b158015610fe657600080fd5b505afa158015610ffa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101e9190612255565b9050600061102b826105ff565b60038481015491925061103d916127e1565b43101561105c5760405162461bcd60e51b81526004016104b790612619565b600073992B9df075935E522EC7950F37eC8557e86f6fdb636a4e066361108186611374565b8660020185876040518563ffffffff1660e01b81526004016110a6949392919061265a565b60006040518083038186803b1580156110be57600080fd5b505af41580156110d2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110fa9190810190611eb3565b9050611106828661144f565b611112818684896115a6565b50505050505050565b6004546001600160401b03908116908216116111795760405162461bcd60e51b815260206004820152601e60248201527f5061796c6f616420626c6f636b6e756d62657220697320746f6f206f6c64000060448201526064016104b7565b611186600a61096061286e565b60045461119c91906001600160401b03166127f9565b6001600160401b0316816001600160401b0316106111fc5760405162461bcd60e51b815260206004820152601e60248201527f5061796c6f616420626c6f636b6e756d62657220697320746f6f206e6577000060448201526064016104b7565b60038290556004805467ffffffffffffffff19166001600160401b0383169081179091556040805184815260208101929092527fd95fe1258d152dc91c81b09380498adc76ed36a6079bcb2ed31eff622ae2d0f1910160405180910390a15050565b60008054906101000a90046001600160a01b03166001600160a01b031663af640d0f6040518163ffffffff1660e01b815260040160206040518083038186803b1580156112aa57600080fd5b505afa1580156112be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e29190612367565b6001600160401b0316836001600160401b03161461136f5760005460405163517044e560e11b81526004810183905263ffffffff841660248201526001600160401b03851660448201526001600160a01b039091169063a2e089ca90606401600060405180830381600087803b15801561135b57600080fd5b505af1158015611112573d6000803e3d6000fd5b505050565b60008060036001600160401b0316836003015461139191906127e1565b409392505050565b6000806000808451604114156113c35750505060208201516040830151606084015160001a611439565b8451604014156113f15750505060408201516020830151906001600160ff1b0381169060ff1c601b01611439565b60405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016104b7565b61144586828585611696565b9695505050505050565b8161145a82806126b7565b9050146114c55760405162461bcd60e51b815260206004820152603360248201527f4572726f723a204e756d626572206f66207369676e61747572657320646f6573604482015272081b9bdd081b585d18da081c995c5d5a5c9959606a1b60648201526084016104b7565b816114d360208301836126b7565b9050146115485760405162461bcd60e51b815260206004820152603c60248201527f4572726f723a204e756d626572206f662076616c696461746f7220706f73697460448201527f696f6e7320646f6573206e6f74206d617463682072657175697265640000000060648201526084016104b7565b8161155660408301836126b7565b9050146115755760405162461bcd60e51b81526004016104b7906125bc565b8161158360608301836126b7565b9050146115a25760405162461bcd60e51b81526004016104b7906125bc565b5050565b60006115b18261183f565b8051602082012090915060005b8481101561111257611684876115d488806126b7565b848181106115e4576115e46128f1565b90506020028101906115f69190612700565b61160360208b018b6126b7565b86818110611613576116136128f1565b905060200201358a806040019061162a91906126b7565b8781811061163a5761163a6128f1565b905060200201602081019061164f9190611e4d565b61165c60608d018d6126b7565b8881811061166c5761166c6128f1565b905060200281019061167e91906126b7565b896119cd565b8061168e81612896565b9150506115be565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08211156117135760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016104b7565b8360ff16601b148061172857508360ff16601c145b61177f5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b60648201526084016104b7565b6040805160008082526020820180845288905260ff871692820192909252606081018590526080810184905260019060a0016020604051602081039080840390855afa1580156117d3573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166118365760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016104b7565b95945050505050565b606061184e6040830183612746565b61185c906020810190612700565b6118696040850185612746565b356118776040860186612746565b611885906040810190612700565b6118926020880188612324565b60405163381f760d60e01b815263ffffffff90911660048201527386D9aC0Bab011917f57B9E9607833b4340F9D4F89063381f760d9060240160206040518083038186803b1580156118e357600080fd5b505af41580156118f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061191b919061218f565b61192b6040890160208a0161234a565b60405163f83d7d5f60e01b81526001600160401b0390911660048201527386D9aC0Bab011917f57B9E9607833b4340F9D4F89063f83d7d5f9060240160206040518083038186803b15801561197f57600080fd5b505af4158015611993573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119b791906121b9565b604051602001610ef497969594939291906123dd565b6119d78886611bdc565b611a355760405162461bcd60e51b815260206004820152602960248201527f4572726f723a2056616c696461746f72206d757374206265206f6e636520696e60448201526808189a5d199a595b1960ba1b60648201526084016104b7565b611a3f8886611c39565b600054604051635d325d7160e01b81526001600160a01b0390911690635d325d7190611a75908790899088908890600401612426565b60206040518083038186803b158015611a8d57600080fd5b505afa158015611aa1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ac59190611f4f565b611b375760405162461bcd60e51b815260206004820152603d60248201527f4572726f723a2056616c696461746f72206d75737420626520696e2076616c6960448201527f6461746f722073657420617420636f727265637420706f736974696f6e00000060648201526084016104b7565b836001600160a01b0316611b818289898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061139992505050565b6001600160a01b031614611bd25760405162461bcd60e51b81526020600482015260186024820152774572726f723a20496e76616c6964205369676e617475726560401b60448201526064016104b7565b5050505050505050565b600080611beb61010084612824565b90506000611bfb610100856128b1565b9050611c2981868481518110611c1357611c136128f1565b6020026020010151611ca990919063ffffffff16565b60ff166001149250505092915050565b6000611c4761010083612824565b90506000611c57610100846128b1565b9050611c8581858481518110611c6f57611c6f6128f1565b6020026020010151611cb390919063ffffffff16565b848381518110611c9757611c976128f1565b60200260200101818152505050505050565b60ff161c60011690565b600160ff919091161b191690565b5080546000825590600052602060002090810190611cdf9190611d2d565b50565b828054828255906000526020600020908101928215611d1d579160200282015b82811115611d1d578251825591602001919060010190611d02565b50611d29929150611d2d565b5090565b5b80821115611d295760008155600101611d2e565b80356001600160a01b0381168114611d5957600080fd5b919050565b60008083601f840112611d7057600080fd5b5081356001600160401b03811115611d8757600080fd5b6020830191508360208260051b8501011115611da257600080fd5b9250929050565b600082601f830112611dba57600080fd5b81356001600160401b03811115611dd357611dd3612907565b611de6601f8201601f191660200161278e565b818152846020838601011115611dfb57600080fd5b816020850160208301376000918101602001919091529392505050565b600060e08284031215611e2a57600080fd5b50919050565b600060408284031215611e2a57600080fd5b8035611d598161291d565b600060208284031215611e5f57600080fd5b61054e82611d42565b600080600060408486031215611e7d57600080fd5b83356001600160401b03811115611e9357600080fd5b611e9f86828701611d5e565b909790965060209590950135949350505050565b60006020808385031215611ec657600080fd5b82516001600160401b03811115611edc57600080fd5b8301601f81018513611eed57600080fd5b8051611f00611efb826127be565b61278e565b80828252848201915084840188868560051b8701011115611f2057600080fd5b600094505b83851015611f43578051835260019490940193918501918501611f25565b50979650505050505050565b600060208284031215611f6157600080fd5b8151801515811461054e57600080fd5b600060208284031215611f8357600080fd5b81516001600160f81b03198116811461054e57600080fd5b600080600080600080600060c0888a031215611fb657600080fd5b873596506020808901356001600160401b0380821115611fd557600080fd5b818b0191508b601f830112611fe957600080fd5b8135611ff7611efb826127be565b8082825285820191508585018f878560051b880101111561201757600080fd5b600095505b8386101561203a57803583526001959095019491860191860161201c565b509a50505060408b013592508083111561205357600080fd5b61205f8c848d01611da9565b975060608b0135965061207460808c01611d42565b955060a08b013592508083111561208a57600080fd5b50506120988a828b01611d5e565b989b979a50959850939692959293505050565b600080604083850312156120be57600080fd5b823591506020808401356001600160401b03808211156120dd57600080fd5b90850190604082880312156120f157600080fd5b6120f9612766565b82358281111561210857600080fd5b83019150601f8201881361211b57600080fd5b8135612129611efb826127be565b8082825286820191508685018b888560051b880101111561214957600080fd5b600095505b8386101561216c57803583526001959095019491870191870161214e565b5083525061217d9050838501611e42565b84820152809450505050509250929050565b6000602082840312156121a157600080fd5b81516001600160e01b03198116811461054e57600080fd5b6000602082840312156121cb57600080fd5b81516001600160c01b03198116811461054e57600080fd5b600080600061012084860312156121f957600080fd5b6122038585611e18565b925060e084013591506101008401356001600160401b0381111561222657600080fd5b61223286828701611e30565b9150509250925092565b60006020828403121561224e57600080fd5b5035919050565b60006020828403121561226757600080fd5b5051919050565b6000806000806000610160868803121561228757600080fd5b8535945060208601356001600160401b03808211156122a557600080fd5b908701906060828a0312156122b957600080fd5b909450604087013590808211156122cf57600080fd5b908701906080828a0312156122e357600080fd5b8194506122f38960608a01611e18565b935061014088013591508082111561230a57600080fd5b5061231788828901611e30565b9150509295509295909350565b60006020828403121561233657600080fd5b813563ffffffff8116811461054e57600080fd5b60006020828403121561235c57600080fd5b813561054e8161291d565b60006020828403121561237957600080fd5b815161054e8161291d565b60006020828403121561239657600080fd5b813560ff8116811461054e57600080fd5b81835260006001600160fb1b038311156123c057600080fd5b8260051b8083602087013760009401602001938452509192915050565b86888237808701868152600090858760208301376001600160e01b031994909416949093016020810194909452506001600160c01b031916602483015250602c01949350505050565b60018060a01b03851681528360208201526060604082015260006114456060830184866123a7565b6040815260006124626040830185876123a7565b9050826020830152949350505050565b6020808252825182820181905260009190848201906040850190845b818110156124aa5783518352928401929184019160010161248e565b50909695505050505050565b8381528260208201526060604082015260008235601e198436030181126124dc57600080fd5b830180356001600160401b03808211156124f557600080fd5b8160051b360386131561250757600080fd5b6040606086015261251f60a0860183602086016123a7565b9250602086013591506125318261291d565b1660809390930192909252509392505050565b8381526000602084818401526060604084015260a0830184516040606086015281815180845260c0870191508483019350600092505b8083101561259a578351825292840192600192909201919084019061257a565b506001600160401b038488015116608087015280945050505050949350505050565b6020808252603e908201527f4572726f723a204e756d626572206f662076616c696461746f72207075626c6960408201527f63206b65797320646f6573206e6f74206d617463682072657175697265640000606082015260800190565b60208082526021908201527f4572726f723a20426c6f636b207761697420706572696f64206e6f74206f76656040820152603960f91b606082015260800190565b600060808201868352602060808185015281875480845260a0860191508860005282600020935060005b818110156126a057845483526001948501949284019201612684565b505060408501969096525050506060015292915050565b6000808335601e198436030181126126ce57600080fd5b8301803591506001600160401b038211156126e857600080fd5b6020019150600581901b3603821315611da257600080fd5b6000808335601e1984360301811261271757600080fd5b8301803591506001600160401b0382111561273157600080fd5b602001915036819003821315611da257600080fd5b60008235605e1983360301811261275c57600080fd5b9190910192915050565b604080519081016001600160401b038111828210171561278857612788612907565b60405290565b604051601f8201601f191681016001600160401b03811182821017156127b6576127b6612907565b604052919050565b60006001600160401b038211156127d7576127d7612907565b5060051b60200190565b600082198211156127f4576127f46128c5565b500190565b60006001600160401b0380831681851680830382111561281b5761281b6128c5565b01949350505050565b600082612833576128336128db565b500490565b6000816000190483118215151615612852576128526128c5565b500290565b600082821015612869576128696128c5565b500390565b60006001600160401b038381169083168181101561288e5761288e6128c5565b039392505050565b60006000198214156128aa576128aa6128c5565b5060010190565b6000826128c0576128c06128db565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160401b0381168114611cdf57600080fdfea26469706673582212200d9cf059aa865c5e52573063cb36273d4f2629908ba38aa50db5c58fe0a8f49664736f6c63430008060033",
  "deployedBytecode": "0x60806040526004361061011f5760003560e01c806372fe1a9f116100a0578063e2a6ff3f11610064578063e2a6ff3f14610371578063e54d154314610387578063ef0244581461039a578063f376ebbb146103af578063fb752c62146103cf57600080fd5b806372fe1a9f146102d9578063801ed1e3146102ee5780639284801614610326578063be7e93a314610346578063e00dd1611461035b57600080fd5b80635a8d2f0e116100e75780635a8d2f0e146102375780635da57fe91461024c57806366ae69a0146102795780636edda8f414610299578063702d5d09146102b957600080fd5b806320bfa5cb14610124578063243d265f146101945780632d268c9e146101b657806341c9634e146101e65780634afad95b1461020a575b600080fd5b34801561013057600080fd5b5061016a61013f36600461223c565b6005602052600090815260409020805460018201546003909201546001600160a01b03909116919083565b604080516001600160a01b0390941684526020840192909252908201526060015b60405180910390f35b3480156101a057600080fd5b506101b46101af3660046121e3565b6103e4565b005b3480156101c257600080fd5b506101d66101d13660046120ab565b6104c7565b604051901515815260200161018b565b3480156101f257600080fd5b506101fc60035481565b60405190815260200161018b565b34801561021657600080fd5b5061021f610555565b6040516001600160401b03909116815260200161018b565b34801561024357600080fd5b506101fc600381565b34801561025857600080fd5b5061026c610267366004611e68565b610565565b60405161018b9190612472565b34801561028557600080fd5b5060045461021f906001600160401b031681565b3480156102a557600080fd5b506101fc6102b436600461223c565b6105ff565b3480156102c557600080fd5b506101b46102d436600461226e565b610635565b3480156102e557600080fd5b506101fc610729565b3480156102fa57600080fd5b5060015461030e906001600160a01b031681565b6040516001600160a01b03909116815260200161018b565b34801561033257600080fd5b5061026c61034136600461223c565b6107e4565b34801561035257600080fd5b5061021f600a81565b34801561036757600080fd5b506101fc60025481565b34801561037d57600080fd5b5061021f61096081565b6101b4610395366004611f9b565b6108fd565b3480156103a657600080fd5b506101fc60fa81565b3480156103bb57600080fd5b5060005461030e906001600160a01b031681565b3480156103db57600080fd5b5061021f600381565b60006103ef84610c1c565b8051602082012060015460405163133b636960e21b815292935090916001600160a01b0390911690634ced8da49061042f908790859088906004016124b6565b60206040518083038186803b15801561044757600080fd5b505afa15801561045b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047f9190611f4f565b6104c05760405162461bcd60e51b815260206004820152600d60248201526c24b73b30b634b210383937b7b360991b60448201526064015b60405180910390fd5b5050505050565b60015460035460405163133b636960e21b81526000926001600160a01b031691634ced8da4916104fe919087908790600401612544565b60206040518083038186803b15801561051657600080fd5b505afa15801561052a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054e9190611f4f565b9392505050565b610562600a61096061286e565b81565b604051630a48684b60e31b815260609073__$5e72ac5fc85a7e3bdee06ff98c89a7f0bd$__906352434258906105a39087908790879060040161244e565b60006040518083038186803b1580156105bb57600080fd5b505af41580156105cf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105f79190810190611eb3565b949350505050565b600060fa600181610611600386612838565b61061b91906127e1565b6106259190612857565b61062f9190612824565b92915050565b610640858585610f0a565b610658826106516040870187612746565b35836103e4565b6106816106686040860186612746565b356106766020870187612324565b63ffffffff1661111b565b6106ae610694608084016060850161234a565b6106a460a0850160808601612324565b8460a0013561125e565b60408051338152602081018790527fc128224dd1747f24cc4ecd95248a78fe3b1960b100c9d08ba578888bac274c4e910160405180910390a1600085815260056020526040812080546001600160a01b031916815560018101829055906107186002830182611cc1565b600382016000905550505050505050565b600060fa600160fa600360008054906101000a90046001600160a01b03166001600160a01b0316631e526e456040518163ffffffff1660e01b815260040160206040518083038186803b15801561077f57600080fd5b505afa158015610793573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b79190612255565b6107c19190612838565b6107cb91906127e1565b6107d59190612857565b6107df9190612824565b905090565b600081815260056020526040902060038082015460609291610805916127e1565b4310156108245760405162461bcd60e51b81526004016104b790612619565b60008060009054906101000a90046001600160a01b03166001600160a01b0316631e526e456040518163ffffffff1660e01b815260040160206040518083038186803b15801561087357600080fd5b505afa158015610887573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ab9190612255565b905073__$5e72ac5fc85a7e3bdee06ff98c89a7f0bd$__636a4e06636108d084611374565b846002016108dd856105ff565b856040518563ffffffff1660e01b81526004016105a3949392919061265a565b600054604051635d325d7160e01b81526001600160a01b0390911690635d325d7190610933908690889087908790600401612426565b60206040518083038186803b15801561094b57600080fd5b505afa15801561095f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109839190611f4f565b6109f55760405162461bcd60e51b815260206004820152603a60248201527f4572726f723a2053656e646572206d75737420626520696e2076616c6964617460448201527f6f722073657420617420636f727265637420706f736974696f6e00000000000060648201526084016104b7565b826001600160a01b0316610a098887611399565b6001600160a01b031614610a5a5760405162461bcd60e51b81526020600482015260186024820152774572726f723a20496e76616c6964205369676e617475726560401b60448201526064016104b7565b610a62610729565b604051630299641160e51b815273__$5e72ac5fc85a7e3bdee06ff98c89a7f0bd$__9063532c822090610a99908a90600401612472565b60206040518083038186803b158015610ab157600080fd5b505af4158015610ac5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae99190612255565b1015610b455760405162461bcd60e51b815260206004820152602560248201527f4572726f723a204269746669656c64206e6f7420656e6f7567682076616c696460448201526461746f727360d81b60648201526084016104b7565b6040805160808101825233815260208082018a81528284018a81524360608501526002805460009081526005855295909520845181546001600160a01b0319166001600160a01b039091161781559151600183015551805193949193610bb393928501929190910190611ce2565b5060609182015160039091015560025460408051338152436020820152908101919091527ff93e67b44fe47465ca1478dbc20efe59702e2fff4b8beecf053817d7ee29fd55910160405180910390a1600254610c109060016127e1565b60025550505050505050565b606073__$276cc14ce47cc15bfe88c6e1cbd14dec7e$__6353fae674610c456020850185612384565b6040516001600160e01b031960e084901b16815260ff909116600482015260240160206040518083038186803b158015610c7e57600080fd5b505af4158015610c92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb69190611f71565b73__$276cc14ce47cc15bfe88c6e1cbd14dec7e$__63381f760d610ce06040860160208701612324565b6040516001600160e01b031960e084901b16815263ffffffff91909116600482015260240160206040518083038186803b158015610d1d57600080fd5b505af4158015610d31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d55919061218f565b604084013573__$276cc14ce47cc15bfe88c6e1cbd14dec7e$__63f83d7d5f610d84608088016060890161234a565b6040516001600160e01b031960e084901b1681526001600160401b03909116600482015260240160206040518083038186803b158015610dc357600080fd5b505af4158015610dd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dfb91906121b9565b73__$276cc14ce47cc15bfe88c6e1cbd14dec7e$__63381f760d610e2560a0890160808a01612324565b6040516001600160e01b031960e084901b16815263ffffffff91909116600482015260240160206040518083038186803b158015610e6257600080fd5b505af4158015610e76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9a919061218f565b6040516001600160f81b031990951660208601526001600160e01b0319938416602186015260258501929092526001600160c01b031916604584015216604d82015260a0830135605182015260c083013560718201526091015b6040516020818303038152906040529050919050565b600083815260056020526040902080546001600160a01b03163314610f975760405162461bcd60e51b815260206004820152603d60248201527f4572726f723a2053656e646572206164647265737320646f6573206e6f74206d60448201527f61746368206f726967696e616c2076616c69646174696f6e206461746100000060648201526084016104b7565b60008060009054906101000a90046001600160a01b03166001600160a01b0316631e526e456040518163ffffffff1660e01b815260040160206040518083038186803b158015610fe657600080fd5b505afa158015610ffa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101e9190612255565b9050600061102b826105ff565b60038481015491925061103d916127e1565b43101561105c5760405162461bcd60e51b81526004016104b790612619565b600073__$5e72ac5fc85a7e3bdee06ff98c89a7f0bd$__636a4e066361108186611374565b8660020185876040518563ffffffff1660e01b81526004016110a6949392919061265a565b60006040518083038186803b1580156110be57600080fd5b505af41580156110d2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110fa9190810190611eb3565b9050611106828661144f565b611112818684896115a6565b50505050505050565b6004546001600160401b03908116908216116111795760405162461bcd60e51b815260206004820152601e60248201527f5061796c6f616420626c6f636b6e756d62657220697320746f6f206f6c64000060448201526064016104b7565b611186600a61096061286e565b60045461119c91906001600160401b03166127f9565b6001600160401b0316816001600160401b0316106111fc5760405162461bcd60e51b815260206004820152601e60248201527f5061796c6f616420626c6f636b6e756d62657220697320746f6f206e6577000060448201526064016104b7565b60038290556004805467ffffffffffffffff19166001600160401b0383169081179091556040805184815260208101929092527fd95fe1258d152dc91c81b09380498adc76ed36a6079bcb2ed31eff622ae2d0f1910160405180910390a15050565b60008054906101000a90046001600160a01b03166001600160a01b031663af640d0f6040518163ffffffff1660e01b815260040160206040518083038186803b1580156112aa57600080fd5b505afa1580156112be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e29190612367565b6001600160401b0316836001600160401b03161461136f5760005460405163517044e560e11b81526004810183905263ffffffff841660248201526001600160401b03851660448201526001600160a01b039091169063a2e089ca90606401600060405180830381600087803b15801561135b57600080fd5b505af1158015611112573d6000803e3d6000fd5b505050565b60008060036001600160401b0316836003015461139191906127e1565b409392505050565b6000806000808451604114156113c35750505060208201516040830151606084015160001a611439565b8451604014156113f15750505060408201516020830151906001600160ff1b0381169060ff1c601b01611439565b60405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016104b7565b61144586828585611696565b9695505050505050565b8161145a82806126b7565b9050146114c55760405162461bcd60e51b815260206004820152603360248201527f4572726f723a204e756d626572206f66207369676e61747572657320646f6573604482015272081b9bdd081b585d18da081c995c5d5a5c9959606a1b60648201526084016104b7565b816114d360208301836126b7565b9050146115485760405162461bcd60e51b815260206004820152603c60248201527f4572726f723a204e756d626572206f662076616c696461746f7220706f73697460448201527f696f6e7320646f6573206e6f74206d617463682072657175697265640000000060648201526084016104b7565b8161155660408301836126b7565b9050146115755760405162461bcd60e51b81526004016104b7906125bc565b8161158360608301836126b7565b9050146115a25760405162461bcd60e51b81526004016104b7906125bc565b5050565b60006115b18261183f565b8051602082012090915060005b8481101561111257611684876115d488806126b7565b848181106115e4576115e46128f1565b90506020028101906115f69190612700565b61160360208b018b6126b7565b86818110611613576116136128f1565b905060200201358a806040019061162a91906126b7565b8781811061163a5761163a6128f1565b905060200201602081019061164f9190611e4d565b61165c60608d018d6126b7565b8881811061166c5761166c6128f1565b905060200281019061167e91906126b7565b896119cd565b8061168e81612896565b9150506115be565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08211156117135760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016104b7565b8360ff16601b148061172857508360ff16601c145b61177f5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b60648201526084016104b7565b6040805160008082526020820180845288905260ff871692820192909252606081018590526080810184905260019060a0016020604051602081039080840390855afa1580156117d3573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166118365760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016104b7565b95945050505050565b606061184e6040830183612746565b61185c906020810190612700565b6118696040850185612746565b356118776040860186612746565b611885906040810190612700565b6118926020880188612324565b60405163381f760d60e01b815263ffffffff909116600482015273__$276cc14ce47cc15bfe88c6e1cbd14dec7e$__9063381f760d9060240160206040518083038186803b1580156118e357600080fd5b505af41580156118f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061191b919061218f565b61192b6040890160208a0161234a565b60405163f83d7d5f60e01b81526001600160401b03909116600482015273__$276cc14ce47cc15bfe88c6e1cbd14dec7e$",
  "libraries": {
    "Bitfield": "0x992B9df075935E522EC7950F37eC8557e86f6fdb",
    "ScaleCodec": "0x86D9aC0Bab011917f57B9E9607833b4340F9D4F8"
  },
  "devdoc": {
    "events": {
      "FinalVerificationSuccessful(address,uint256)": {
        "params": {
          "id": "the identifier used",
          "prover": "The address of the successful prover"
        }
      },
      "InitialVerificationSuccessful(address,uint256,uint256)": {
        "details": "Note that the prover must wait until `n` blocks have been mined subsequent to the generation of this event before the 2nd tx can be sent",
        "params": {
          "blockNumber": "The blocknumber in which the initial validation succeeded",
          "id": "An identifier to provide disambiguation",
          "prover": "The address of the calling prover"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "completeSignatureCommitment(uint256,(uint32,uint64,(bytes32,bytes,bytes)),(bytes[],uint256[],address[],bytes32[][]),(uint8,uint32,bytes32,uint64,uint32,bytes32,bytes32),(bytes32[],uint64))": {
        "params": {
          "commitment": "contains the full commitment that was used for the commitmentHash",
          "id": "an identifying value generated in the previous transaction",
          "validatorProof": "a struct containing the data needed to verify all validator signatures"
        }
      },
      "constructor": {
        "params": {
          "_mmrVerification": "The contract to be used for MMR verification",
          "_validatorRegistry": "The contract to be used as the validator registry"
        }
      },
      "newSignatureCommitment(bytes32,uint256[],bytes,uint256,address,bytes32[])": {
        "params": {
          "commitmentHash": "contains the commitmentHash signed by the validator(s)",
          "validatorClaimsBitfield": "a bitfield containing a membership status of each validator who has claimed to have signed the commitmentHash",
          "validatorPosition": "the position of the validator, index starting at 0",
          "validatorPublicKey": "the public key of the validator",
          "validatorPublicKeyMerkleProof": "proof required for validation of the public key in the validator merkle tree",
          "validatorSignature": "the signature of one validator"
        }
      },
      "verifyBeefyMerkleLeaf(bytes32,(bytes32[],uint64))": {
        "params": {
          "beefyMMRLeaf": "contains the merkle leaf to be verified",
          "proof": "contains simplified mmr proof"
        }
      }
    },
    "title": "A entry contract for the Ethereum light client",
    "version": 1
  },
  "userdoc": {
    "events": {
      "FinalVerificationSuccessful(address,uint256)": {
        "notice": "Notifies an observer that the complete verification process has  finished successfuly and the new commitmentHash will be accepted"
      },
      "InitialVerificationSuccessful(address,uint256,uint256)": {
        "notice": "Notifies an observer that the prover's attempt at initital verification was successful."
      }
    },
    "kind": "user",
    "methods": {
      "completeSignatureCommitment(uint256,(uint32,uint64,(bytes32,bytes,bytes)),(bytes[],uint256[],address[],bytes32[][]),(uint8,uint32,bytes32,uint64,uint32,bytes32,bytes32),(bytes32[],uint64))": {
        "notice": "Performs the second step in the validation logic"
      },
      "constructor": {
        "notice": "Deploys the BeefyLightClient contract"
      },
      "newSignatureCommitment(bytes32,uint256[],bytes,uint256,address,bytes32[])": {
        "notice": "Executed by the prover in order to begin the process of block acceptance by the light client"
      },
      "verifyBeefyMerkleLeaf(bytes32,(bytes32[],uint64))": {
        "notice": "Executed by the incoming channel in order to verify commitment"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4923,
        "contract": "@snowfork/snowbridge-contracts/contracts/BeefyLightClient.sol:BeefyLightClient",
        "label": "validatorRegistry",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ValidatorRegistry)7982"
      },
      {
        "astId": 4926,
        "contract": "@snowfork/snowbridge-contracts/contracts/BeefyLightClient.sol:BeefyLightClient",
        "label": "mmrVerification",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(SimplifiedMMRVerification)7896"
      },
      {
        "astId": 4928,
        "contract": "@snowfork/snowbridge-contracts/contracts/BeefyLightClient.sol:BeefyLightClient",
        "label": "currentId",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 4930,
        "contract": "@snowfork/snowbridge-contracts/contracts/BeefyLightClient.sol:BeefyLightClient",
        "label": "latestMMRRoot",
        "offset": 0,
        "slot": "3",
        "type": "t_bytes32"
      },
      {
        "astId": 4932,
        "contract": "@snowfork/snowbridge-contracts/contracts/BeefyLightClient.sol:BeefyLightClient",
        "label": "latestBeefyBlock",
        "offset": 0,
        "slot": "4",
        "type": "t_uint64"
      },
      {
        "astId": 4937,
        "contract": "@snowfork/snowbridge-contracts/contracts/BeefyLightClient.sol:BeefyLightClient",
        "label": "validationData",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(ValidationData)4905_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(SimplifiedMMRVerification)7896": {
        "encoding": "inplace",
        "label": "contract SimplifiedMMRVerification",
        "numberOfBytes": "20"
      },
      "t_contract(ValidatorRegistry)7982": {
        "encoding": "inplace",
        "label": "contract ValidatorRegistry",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_struct(ValidationData)4905_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BeefyLightClient.ValidationData)",
        "numberOfBytes": "32",
        "value": "t_struct(ValidationData)4905_storage"
      },
      "t_struct(ValidationData)4905_storage": {
        "encoding": "inplace",
        "label": "struct BeefyLightClient.ValidationData",
        "members": [
          {
            "astId": 4897,
            "contract": "@snowfork/snowbridge-contracts/contracts/BeefyLightClient.sol:BeefyLightClient",
            "label": "senderAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 4899,
            "contract": "@snowfork/snowbridge-contracts/contracts/BeefyLightClient.sol:BeefyLightClient",
            "label": "commitmentHash",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 4902,
            "contract": "@snowfork/snowbridge-contracts/contracts/BeefyLightClient.sol:BeefyLightClient",
            "label": "validatorClaimsBitfield",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 4904,
            "contract": "@snowfork/snowbridge-contracts/contracts/BeefyLightClient.sol:BeefyLightClient",
            "label": "blockNumber",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}