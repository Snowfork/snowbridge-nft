{
  "address": "0x8cF6147918A5CBb672703F879f385036f8793a24",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "feeBurner",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "inbound",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "outbound",
              "type": "address"
            }
          ],
          "internalType": "struct DOTApp.Channel",
          "name": "_basic",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "inbound",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "outbound",
              "type": "address"
            }
          ],
          "internalType": "struct DOTApp.Channel",
          "name": "_incentivized",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "upgrader",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "inbound",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "outbound",
              "type": "address"
            }
          ],
          "indexed": false,
          "internalType": "struct DOTApp.Channel",
          "name": "basic",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "inbound",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "outbound",
              "type": "address"
            }
          ],
          "indexed": false,
          "internalType": "struct DOTApp.Channel",
          "name": "incentivized",
          "type": "tuple"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CHANNEL_UPGRADE_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEE_BURNER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INBOUND_CHANNEL_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_recipient",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "enum ChannelId",
          "name": "_channelId",
          "type": "uint8"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "feePayer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "burnFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ChannelId",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "channels",
      "outputs": [
        {
          "internalType": "address",
          "name": "inbound",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "outbound",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_sender",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract WrappedToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "inbound",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "outbound",
              "type": "address"
            }
          ],
          "internalType": "struct DOTApp.Channel",
          "name": "_basic",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "inbound",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "outbound",
              "type": "address"
            }
          ],
          "internalType": "struct DOTApp.Channel",
          "name": "_incentivized",
          "type": "tuple"
        }
      ],
      "name": "upgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6a6b06ceb36ccc63278a6dcf169d6d0ff825e778ede528d8b25f1360e89ef8a1",
  "receipt": {
    "to": null,
    "from": "0xBe68fC2d8249eb60bfCf0e71D5A0d2F2e292c4eD",
    "contractAddress": "0x8cF6147918A5CBb672703F879f385036f8793a24",
    "transactionIndex": 0,
    "gasUsed": "3010153",
    "logsBloom": "0x00000004020800a008100000002100080820000000800a0000800000000000001000000000000000400010000000000000000000000000000000000000040000000000400000004000000000002000000001000000040000000400000100000000000000020400400000000000000800000010000020000400000000010800400000080000000000000000000004000000000000000000100000000000000800010000400000000001000000000000000200000800000000201800000000000000000000000000000000000000000002000000000002000100800040000020000000000000000000000000000000000002000000000000000000000200000000",
    "blockHash": "0xd16c11d8fa7880a74717ba723b842d2241a0e5a95ac1a8ff45097976749faf68",
    "transactionHash": "0x6a6b06ceb36ccc63278a6dcf169d6d0ff825e778ede528d8b25f1360e89ef8a1",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 27,
        "transactionHash": "0x6a6b06ceb36ccc63278a6dcf169d6d0ff825e778ede528d8b25f1360e89ef8a1",
        "address": "0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24",
        "topics": [
          "0x93baa6efbd2244243bfee6ce4cfdd1d04fc4c0e9a786abd3a41313bd352db153",
          "0x0000000000000000000000000c8df76790248ed9045415882cdc1ef924e23216",
          "0xac7fbab5f54a3ca8194167523c6753bfeb96a445279294b6125b68cce2177054",
          "0x0000000000000000000000000c8df76790248ed9045415882cdc1ef924e23216"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xd16c11d8fa7880a74717ba723b842d2241a0e5a95ac1a8ff45097976749faf68"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 27,
        "transactionHash": "0x6a6b06ceb36ccc63278a6dcf169d6d0ff825e778ede528d8b25f1360e89ef8a1",
        "address": "0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24",
        "topics": [
          "0x93baa6efbd2244243bfee6ce4cfdd1d04fc4c0e9a786abd3a41313bd352db153",
          "0x0000000000000000000000000c8df76790248ed9045415882cdc1ef924e23216",
          "0xaea199e31a596269b42cdafd93407f14436db6e4cad65417994c2eb37381e05a",
          "0x0000000000000000000000000c8df76790248ed9045415882cdc1ef924e23216"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xd16c11d8fa7880a74717ba723b842d2241a0e5a95ac1a8ff45097976749faf68"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 27,
        "transactionHash": "0x6a6b06ceb36ccc63278a6dcf169d6d0ff825e778ede528d8b25f1360e89ef8a1",
        "address": "0x0c8df76790248eD9045415882cdC1eF924E23216",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008cf6147918a5cbb672703f879f385036f8793a24"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0xd16c11d8fa7880a74717ba723b842d2241a0e5a95ac1a8ff45097976749faf68"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 27,
        "transactionHash": "0x6a6b06ceb36ccc63278a6dcf169d6d0ff825e778ede528d8b25f1360e89ef8a1",
        "address": "0x8cF6147918A5CBb672703F879f385036f8793a24",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x9bac3bf563d906e4c002c9b37dc34326776a9168ece7376a7a577f98c0c99a89",
          "0x000000000000000000000000be68fc2d8249eb60bfcf0e71d5a0d2f2e292c4ed",
          "0x000000000000000000000000be68fc2d8249eb60bfcf0e71d5a0d2f2e292c4ed"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0xd16c11d8fa7880a74717ba723b842d2241a0e5a95ac1a8ff45097976749faf68"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 27,
        "transactionHash": "0x6a6b06ceb36ccc63278a6dcf169d6d0ff825e778ede528d8b25f1360e89ef8a1",
        "address": "0x8cF6147918A5CBb672703F879f385036f8793a24",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0xf857e99667b61d9feb64d6cb140ba8a8ba3501d58a4940223c8e74c45932fbf4",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x9bac3bf563d906e4c002c9b37dc34326776a9168ece7376a7a577f98c0c99a89"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0xd16c11d8fa7880a74717ba723b842d2241a0e5a95ac1a8ff45097976749faf68"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 27,
        "transactionHash": "0x6a6b06ceb36ccc63278a6dcf169d6d0ff825e778ede528d8b25f1360e89ef8a1",
        "address": "0x8cF6147918A5CBb672703F879f385036f8793a24",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0x9bac3bf563d906e4c002c9b37dc34326776a9168ece7376a7a577f98c0c99a89",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x9bac3bf563d906e4c002c9b37dc34326776a9168ece7376a7a577f98c0c99a89"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0xd16c11d8fa7880a74717ba723b842d2241a0e5a95ac1a8ff45097976749faf68"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 27,
        "transactionHash": "0x6a6b06ceb36ccc63278a6dcf169d6d0ff825e778ede528d8b25f1360e89ef8a1",
        "address": "0x8cF6147918A5CBb672703F879f385036f8793a24",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xffe71d6904653823f16901502129e7da73d4958bc25aad6e8555aa3d6ac73b97",
          "0x000000000000000000000000ee9170abfbf9421ad6dd07f6bdec9d89f2b581e0",
          "0x000000000000000000000000be68fc2d8249eb60bfcf0e71d5a0d2f2e292c4ed"
        ],
        "data": "0x",
        "logIndex": 6,
        "blockHash": "0xd16c11d8fa7880a74717ba723b842d2241a0e5a95ac1a8ff45097976749faf68"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 27,
        "transactionHash": "0x6a6b06ceb36ccc63278a6dcf169d6d0ff825e778ede528d8b25f1360e89ef8a1",
        "address": "0x8cF6147918A5CBb672703F879f385036f8793a24",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xf857e99667b61d9feb64d6cb140ba8a8ba3501d58a4940223c8e74c45932fbf4",
          "0x000000000000000000000000774667629726ec1fabebcec0d9139bd1c8f72a23",
          "0x000000000000000000000000be68fc2d8249eb60bfcf0e71d5a0d2f2e292c4ed"
        ],
        "data": "0x",
        "logIndex": 7,
        "blockHash": "0xd16c11d8fa7880a74717ba723b842d2241a0e5a95ac1a8ff45097976749faf68"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 27,
        "transactionHash": "0x6a6b06ceb36ccc63278a6dcf169d6d0ff825e778ede528d8b25f1360e89ef8a1",
        "address": "0x8cF6147918A5CBb672703F879f385036f8793a24",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xf857e99667b61d9feb64d6cb140ba8a8ba3501d58a4940223c8e74c45932fbf4",
          "0x00000000000000000000000083428c7db9815f482a39a1715684dcf755021997",
          "0x000000000000000000000000be68fc2d8249eb60bfcf0e71d5a0d2f2e292c4ed"
        ],
        "data": "0x",
        "logIndex": 8,
        "blockHash": "0xd16c11d8fa7880a74717ba723b842d2241a0e5a95ac1a8ff45097976749faf68"
      }
    ],
    "blockNumber": 27,
    "cumulativeGasUsed": "3010153",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Snowfork DOT",
    "SnowDOT",
    "0xEE9170ABFbf9421Ad6DD07F6BDec9D89F2B581E0",
    {
      "inbound": "0x774667629726ec1FaBEbCEc0D9139bD1C8f72a23",
      "outbound": "0xF8F7758FbcEfd546eAEff7dE24AFf666B6228e73"
    },
    {
      "inbound": "0x83428c7db9815f482a39a1715684dCF755021997",
      "outbound": "0xEE9170ABFbf9421Ad6DD07F6BDec9D89F2B581E0"
    }
  ],
  "solcInputHash": "4c5f7479fbcbb8f587221b3596eb14de",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"feeBurner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"inbound\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outbound\",\"type\":\"address\"}],\"internalType\":\"struct DOTApp.Channel\",\"name\":\"_basic\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"inbound\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outbound\",\"type\":\"address\"}],\"internalType\":\"struct DOTApp.Channel\",\"name\":\"_incentivized\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"upgrader\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"inbound\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outbound\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct DOTApp.Channel\",\"name\":\"basic\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"inbound\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outbound\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct DOTApp.Channel\",\"name\":\"incentivized\",\"type\":\"tuple\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CHANNEL_UPGRADE_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_BURNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INBOUND_CHANNEL_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_recipient\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"enum ChannelId\",\"name\":\"_channelId\",\"type\":\"uint8\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feePayer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burnFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ChannelId\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"channels\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"inbound\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outbound\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_sender\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract WrappedToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"inbound\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outbound\",\"type\":\"address\"}],\"internalType\":\"struct DOTApp.Channel\",\"name\":\"_basic\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"inbound\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outbound\",\"type\":\"address\"}],\"internalType\":\"struct DOTApp.Channel\",\"name\":\"_incentivized\",\"type\":\"tuple\"}],\"name\":\"upgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@snowfork/snowbridge-contracts/contracts/DOTApp.sol\":\"DOTApp\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n    function grantRole(bytes32 role, address account) external;\\n    function revokeRole(bytes32 role, address account) external;\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping (address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if(!hasRole(role, account)) {\\n            revert(string(abi.encodePacked(\\n                \\\"AccessControl: account \\\",\\n                Strings.toHexString(uint160(account), 20),\\n                \\\" is missing role \\\",\\n                Strings.toHexString(uint256(role), 32)\\n            )));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x98fac37221212c8f126f198d262a4df86394bd1a9969f61e40739fe8ac013dd8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC777/ERC777.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC777.sol\\\";\\nimport \\\"./IERC777Recipient.sol\\\";\\nimport \\\"./IERC777Sender.sol\\\";\\nimport \\\"../ERC20/IERC20.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/IERC1820Registry.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC777} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * Support for ERC20 is included in this contract, as specified by the EIP: both\\n * the ERC777 and ERC20 interfaces can be safely used when interacting with it.\\n * Both {IERC777-Sent} and {IERC20-Transfer} events are emitted on token\\n * movements.\\n *\\n * Additionally, the {IERC777-granularity} value is hard-coded to `1`, meaning that there\\n * are no special restrictions in the amount of tokens that created, moved, or\\n * destroyed. This makes integration with ERC20 applications seamless.\\n */\\ncontract ERC777 is Context, IERC777, IERC20 {\\n    using Address for address;\\n\\n    IERC1820Registry constant internal _ERC1820_REGISTRY = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\\n\\n    mapping(address => uint256) private _balances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    bytes32 private constant _TOKENS_SENDER_INTERFACE_HASH = keccak256(\\\"ERC777TokensSender\\\");\\n    bytes32 private constant _TOKENS_RECIPIENT_INTERFACE_HASH = keccak256(\\\"ERC777TokensRecipient\\\");\\n\\n    // This isn't ever read from - it's only used to respond to the defaultOperators query.\\n    address[] private _defaultOperatorsArray;\\n\\n    // Immutable, but accounts may revoke them (tracked in __revokedDefaultOperators).\\n    mapping(address => bool) private _defaultOperators;\\n\\n    // For each account, a mapping of its operators and revoked default operators.\\n    mapping(address => mapping(address => bool)) private _operators;\\n    mapping(address => mapping(address => bool)) private _revokedDefaultOperators;\\n\\n    // ERC20-allowances\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    /**\\n     * @dev `defaultOperators` may be an empty array.\\n     */\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        address[] memory defaultOperators_\\n    ) {\\n        _name = name_;\\n        _symbol = symbol_;\\n\\n        _defaultOperatorsArray = defaultOperators_;\\n        for (uint256 i = 0; i < defaultOperators_.length; i++) {\\n            _defaultOperators[defaultOperators_[i]] = true;\\n        }\\n\\n        // register interfaces\\n        _ERC1820_REGISTRY.setInterfaceImplementer(address(this), keccak256(\\\"ERC777Token\\\"), address(this));\\n        _ERC1820_REGISTRY.setInterfaceImplementer(address(this), keccak256(\\\"ERC20Token\\\"), address(this));\\n    }\\n\\n    /**\\n     * @dev See {IERC777-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC777-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {ERC20-decimals}.\\n     *\\n     * Always returns 18, as per the\\n     * [ERC777 EIP](https://eips.ethereum.org/EIPS/eip-777#backward-compatibility).\\n     */\\n    function decimals() public pure virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC777-granularity}.\\n     *\\n     * This implementation always returns `1`.\\n     */\\n    function granularity() public view virtual override returns (uint256) {\\n        return 1;\\n    }\\n\\n    /**\\n     * @dev See {IERC777-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override(IERC20, IERC777) returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by an account (`tokenHolder`).\\n     */\\n    function balanceOf(address tokenHolder) public view virtual override(IERC20, IERC777) returns (uint256) {\\n        return _balances[tokenHolder];\\n    }\\n\\n    /**\\n     * @dev See {IERC777-send}.\\n     *\\n     * Also emits a {IERC20-Transfer} event for ERC20 compatibility.\\n     */\\n    function send(address recipient, uint256 amount, bytes memory data) public virtual override  {\\n        _send(_msgSender(), recipient, amount, data, \\\"\\\", true);\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Unlike `send`, `recipient` is _not_ required to implement the {IERC777Recipient}\\n     * interface if it is a contract.\\n     *\\n     * Also emits a {Sent} event.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        require(recipient != address(0), \\\"ERC777: transfer to the zero address\\\");\\n\\n        address from = _msgSender();\\n\\n        _callTokensToSend(from, from, recipient, amount, \\\"\\\", \\\"\\\");\\n\\n        _move(from, from, recipient, amount, \\\"\\\", \\\"\\\");\\n\\n        _callTokensReceived(from, from, recipient, amount, \\\"\\\", \\\"\\\", false);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC777-burn}.\\n     *\\n     * Also emits a {IERC20-Transfer} event for ERC20 compatibility.\\n     */\\n    function burn(uint256 amount, bytes memory data) public virtual override  {\\n        _burn(_msgSender(), amount, data, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC777-isOperatorFor}.\\n     */\\n    function isOperatorFor(address operator, address tokenHolder) public view virtual override returns (bool) {\\n        return operator == tokenHolder ||\\n            (_defaultOperators[operator] && !_revokedDefaultOperators[tokenHolder][operator]) ||\\n            _operators[tokenHolder][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC777-authorizeOperator}.\\n     */\\n    function authorizeOperator(address operator) public virtual override  {\\n        require(_msgSender() != operator, \\\"ERC777: authorizing self as operator\\\");\\n\\n        if (_defaultOperators[operator]) {\\n            delete _revokedDefaultOperators[_msgSender()][operator];\\n        } else {\\n            _operators[_msgSender()][operator] = true;\\n        }\\n\\n        emit AuthorizedOperator(operator, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC777-revokeOperator}.\\n     */\\n    function revokeOperator(address operator) public virtual override  {\\n        require(operator != _msgSender(), \\\"ERC777: revoking self as operator\\\");\\n\\n        if (_defaultOperators[operator]) {\\n            _revokedDefaultOperators[_msgSender()][operator] = true;\\n        } else {\\n            delete _operators[_msgSender()][operator];\\n        }\\n\\n        emit RevokedOperator(operator, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC777-defaultOperators}.\\n     */\\n    function defaultOperators() public view virtual override returns (address[] memory) {\\n        return _defaultOperatorsArray;\\n    }\\n\\n    /**\\n     * @dev See {IERC777-operatorSend}.\\n     *\\n     * Emits {Sent} and {IERC20-Transfer} events.\\n     */\\n    function operatorSend(\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        bytes memory data,\\n        bytes memory operatorData\\n    )\\n        public\\n        virtual\\n        override\\n    {\\n        require(isOperatorFor(_msgSender(), sender), \\\"ERC777: caller is not an operator for holder\\\");\\n        _send(sender, recipient, amount, data, operatorData, true);\\n    }\\n\\n    /**\\n     * @dev See {IERC777-operatorBurn}.\\n     *\\n     * Emits {Burned} and {IERC20-Transfer} events.\\n     */\\n    function operatorBurn(address account, uint256 amount, bytes memory data, bytes memory operatorData) public virtual override {\\n        require(isOperatorFor(_msgSender(), account), \\\"ERC777: caller is not an operator for holder\\\");\\n        _burn(account, amount, data, operatorData);\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     *\\n     * Note that operator and allowance concepts are orthogonal: operators may\\n     * not have allowance, and accounts with allowance may not be operators\\n     * themselves.\\n     */\\n    function allowance(address holder, address spender) public view virtual override returns (uint256) {\\n        return _allowances[holder][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Note that accounts cannot have allowance issued by their operators.\\n     */\\n    function approve(address spender, uint256 value) public virtual override returns (bool) {\\n        address holder = _msgSender();\\n        _approve(holder, spender, value);\\n        return true;\\n    }\\n\\n   /**\\n    * @dev See {IERC20-transferFrom}.\\n    *\\n    * Note that operator and allowance concepts are orthogonal: operators cannot\\n    * call `transferFrom` (unless they have allowance), and accounts with\\n    * allowance cannot call `operatorSend` (unless they are operators).\\n    *\\n    * Emits {Sent}, {IERC20-Transfer} and {IERC20-Approval} events.\\n    */\\n    function transferFrom(address holder, address recipient, uint256 amount) public virtual override returns (bool) {\\n        require(recipient != address(0), \\\"ERC777: transfer to the zero address\\\");\\n        require(holder != address(0), \\\"ERC777: transfer from the zero address\\\");\\n\\n        address spender = _msgSender();\\n\\n        _callTokensToSend(spender, holder, recipient, amount, \\\"\\\", \\\"\\\");\\n\\n        _move(spender, holder, recipient, amount, \\\"\\\", \\\"\\\");\\n\\n        uint256 currentAllowance = _allowances[holder][spender];\\n        require(currentAllowance >= amount, \\\"ERC777: transfer amount exceeds allowance\\\");\\n        _approve(holder, spender, currentAllowance - amount);\\n\\n        _callTokensReceived(spender, holder, recipient, amount, \\\"\\\", \\\"\\\", false);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * If a send hook is registered for `account`, the corresponding function\\n     * will be called with `operator`, `data` and `operatorData`.\\n     *\\n     * See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits {Minted} and {IERC20-Transfer} events.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - if `account` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function _mint(\\n        address account,\\n        uint256 amount,\\n        bytes memory userData,\\n        bytes memory operatorData\\n    )\\n        internal\\n        virtual\\n    {\\n        _mint(account, amount, userData, operatorData, true);\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * If `requireReceptionAck` is set to true, and if a send hook is\\n     * registered for `account`, the corresponding function will be called with\\n     * `operator`, `data` and `operatorData`.\\n     *\\n     * See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits {Minted} and {IERC20-Transfer} events.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - if `account` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function _mint(\\n        address account,\\n        uint256 amount,\\n        bytes memory userData,\\n        bytes memory operatorData,\\n        bool requireReceptionAck\\n    )\\n        internal\\n        virtual\\n    {\\n        require(account != address(0), \\\"ERC777: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), account, amount);\\n\\n        // Update state variables\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n\\n        _callTokensReceived(operator, address(0), account, amount, userData, operatorData, requireReceptionAck);\\n\\n        emit Minted(operator, account, amount, userData, operatorData);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Send tokens\\n     * @param from address token holder address\\n     * @param to address recipient address\\n     * @param amount uint256 amount of tokens to transfer\\n     * @param userData bytes extra information provided by the token holder (if any)\\n     * @param operatorData bytes extra information provided by the operator (if any)\\n     * @param requireReceptionAck if true, contract recipients are required to implement ERC777TokensRecipient\\n     */\\n    function _send(\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes memory userData,\\n        bytes memory operatorData,\\n        bool requireReceptionAck\\n    )\\n        internal\\n        virtual\\n    {\\n        require(from != address(0), \\\"ERC777: send from the zero address\\\");\\n        require(to != address(0), \\\"ERC777: send to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _callTokensToSend(operator, from, to, amount, userData, operatorData);\\n\\n        _move(operator, from, to, amount, userData, operatorData);\\n\\n        _callTokensReceived(operator, from, to, amount, userData, operatorData, requireReceptionAck);\\n    }\\n\\n    /**\\n     * @dev Burn tokens\\n     * @param from address token holder address\\n     * @param amount uint256 amount of tokens to burn\\n     * @param data bytes extra information provided by the token holder\\n     * @param operatorData bytes extra information provided by the operator (if any)\\n     */\\n    function _burn(\\n        address from,\\n        uint256 amount,\\n        bytes memory data,\\n        bytes memory operatorData\\n    )\\n        internal\\n        virtual\\n    {\\n        require(from != address(0), \\\"ERC777: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _callTokensToSend(operator, from, address(0), amount, data, operatorData);\\n\\n        _beforeTokenTransfer(operator, from, address(0), amount);\\n\\n        // Update state variables\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC777: burn amount exceeds balance\\\");\\n        _balances[from] = fromBalance - amount;\\n        _totalSupply -= amount;\\n\\n        emit Burned(operator, from, amount, data, operatorData);\\n        emit Transfer(from, address(0), amount);\\n    }\\n\\n    function _move(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes memory userData,\\n        bytes memory operatorData\\n    )\\n        private\\n    {\\n        _beforeTokenTransfer(operator, from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC777: transfer amount exceeds balance\\\");\\n        _balances[from] = fromBalance - amount;\\n        _balances[to] += amount;\\n\\n        emit Sent(operator, from, to, amount, userData, operatorData);\\n        emit Transfer(from, to, amount);\\n    }\\n\\n    /**\\n     * @dev See {ERC20-_approve}.\\n     *\\n     * Note that accounts cannot have allowance issued by their operators.\\n     */\\n    function _approve(address holder, address spender, uint256 value) internal {\\n        require(holder != address(0), \\\"ERC777: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC777: approve to the zero address\\\");\\n\\n        _allowances[holder][spender] = value;\\n        emit Approval(holder, spender, value);\\n    }\\n\\n    /**\\n     * @dev Call from.tokensToSend() if the interface is registered\\n     * @param operator address operator requesting the transfer\\n     * @param from address token holder address\\n     * @param to address recipient address\\n     * @param amount uint256 amount of tokens to transfer\\n     * @param userData bytes extra information provided by the token holder (if any)\\n     * @param operatorData bytes extra information provided by the operator (if any)\\n     */\\n    function _callTokensToSend(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes memory userData,\\n        bytes memory operatorData\\n    )\\n        private\\n    {\\n        address implementer = _ERC1820_REGISTRY.getInterfaceImplementer(from, _TOKENS_SENDER_INTERFACE_HASH);\\n        if (implementer != address(0)) {\\n            IERC777Sender(implementer).tokensToSend(operator, from, to, amount, userData, operatorData);\\n        }\\n    }\\n\\n    /**\\n     * @dev Call to.tokensReceived() if the interface is registered. Reverts if the recipient is a contract but\\n     * tokensReceived() was not registered for the recipient\\n     * @param operator address operator requesting the transfer\\n     * @param from address token holder address\\n     * @param to address recipient address\\n     * @param amount uint256 amount of tokens to transfer\\n     * @param userData bytes extra information provided by the token holder (if any)\\n     * @param operatorData bytes extra information provided by the operator (if any)\\n     * @param requireReceptionAck if true, contract recipients are required to implement ERC777TokensRecipient\\n     */\\n    function _callTokensReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes memory userData,\\n        bytes memory operatorData,\\n        bool requireReceptionAck\\n    )\\n        private\\n    {\\n        address implementer = _ERC1820_REGISTRY.getInterfaceImplementer(to, _TOKENS_RECIPIENT_INTERFACE_HASH);\\n        if (implementer != address(0)) {\\n            IERC777Recipient(implementer).tokensReceived(operator, from, to, amount, userData, operatorData);\\n        } else if (requireReceptionAck) {\\n            require(!to.isContract(), \\\"ERC777: token recipient contract has no implementer for ERC777TokensRecipient\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes\\n     * calls to {send}, {transfer}, {operatorSend}, minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address operator, address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0x980233ba96c42246563843d9310b79622f25f35dcde217bfec2305e90bb42c31\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC777/IERC777.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC777Token standard as defined in the EIP.\\n *\\n * This contract uses the\\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 registry standard] to let\\n * token holders and recipients react to token movements by using setting implementers\\n * for the associated interfaces in said registry. See {IERC1820Registry} and\\n * {ERC1820Implementer}.\\n */\\ninterface IERC777 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the smallest part of the token that is not divisible. This\\n     * means all token operations (creation, movement and destruction) must have\\n     * amounts that are a multiple of this number.\\n     *\\n     * For most token contracts, this value will equal 1.\\n     */\\n    function granularity() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by an account (`owner`).\\n     */\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * If send or receive hooks are registered for the caller and `recipient`,\\n     * the corresponding functions will be called with `data` and empty\\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits a {Sent} event.\\n     *\\n     * Requirements\\n     *\\n     * - the caller must have at least `amount` tokens.\\n     * - `recipient` cannot be the zero address.\\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function send(address recipient, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller's account, reducing the\\n     * total supply.\\n     *\\n     * If a send hook is registered for the caller, the corresponding function\\n     * will be called with `data` and empty `operatorData`. See {IERC777Sender}.\\n     *\\n     * Emits a {Burned} event.\\n     *\\n     * Requirements\\n     *\\n     * - the caller must have at least `amount` tokens.\\n     */\\n    function burn(uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev Returns true if an account is an operator of `tokenHolder`.\\n     * Operators can send and burn tokens on behalf of their owners. All\\n     * accounts are their own operator.\\n     *\\n     * See {operatorSend} and {operatorBurn}.\\n     */\\n    function isOperatorFor(address operator, address tokenHolder) external view returns (bool);\\n\\n    /**\\n     * @dev Make an account an operator of the caller.\\n     *\\n     * See {isOperatorFor}.\\n     *\\n     * Emits an {AuthorizedOperator} event.\\n     *\\n     * Requirements\\n     *\\n     * - `operator` cannot be calling address.\\n     */\\n    function authorizeOperator(address operator) external;\\n\\n    /**\\n     * @dev Revoke an account's operator status for the caller.\\n     *\\n     * See {isOperatorFor} and {defaultOperators}.\\n     *\\n     * Emits a {RevokedOperator} event.\\n     *\\n     * Requirements\\n     *\\n     * - `operator` cannot be calling address.\\n     */\\n    function revokeOperator(address operator) external;\\n\\n    /**\\n     * @dev Returns the list of default operators. These accounts are operators\\n     * for all token holders, even if {authorizeOperator} was never called on\\n     * them.\\n     *\\n     * This list is immutable, but individual holders may revoke these via\\n     * {revokeOperator}, in which case {isOperatorFor} will return false.\\n     */\\n    function defaultOperators() external view returns (address[] memory);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient`. The caller must\\n     * be an operator of `sender`.\\n     *\\n     * If send or receive hooks are registered for `sender` and `recipient`,\\n     * the corresponding functions will be called with `data` and\\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits a {Sent} event.\\n     *\\n     * Requirements\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `sender` must have at least `amount` tokens.\\n     * - the caller must be an operator for `sender`.\\n     * - `recipient` cannot be the zero address.\\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function operatorSend(\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the total supply.\\n     * The caller must be an operator of `account`.\\n     *\\n     * If a send hook is registered for `account`, the corresponding function\\n     * will be called with `data` and `operatorData`. See {IERC777Sender}.\\n     *\\n     * Emits a {Burned} event.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     * - the caller must be an operator for `account`.\\n     */\\n    function operatorBurn(\\n        address account,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external;\\n\\n    event Sent(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 amount,\\n        bytes data,\\n        bytes operatorData\\n    );\\n\\n    event Minted(address indexed operator, address indexed to, uint256 amount, bytes data, bytes operatorData);\\n\\n    event Burned(address indexed operator, address indexed from, uint256 amount, bytes data, bytes operatorData);\\n\\n    event AuthorizedOperator(address indexed operator, address indexed tokenHolder);\\n\\n    event RevokedOperator(address indexed operator, address indexed tokenHolder);\\n}\\n\",\"keccak256\":\"0x180af7df8832ffcba53dae0c5450b062d2c571a8eaec22619fcaef5758503d7d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC777TokensRecipient standard as defined in the EIP.\\n *\\n * Accounts can be notified of {IERC777} tokens being sent to them by having a\\n * contract implement this interface (contract holders can be their own\\n * implementer) and registering it on the\\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\\n *\\n * See {IERC1820Registry} and {ERC1820Implementer}.\\n */\\ninterface IERC777Recipient {\\n    /**\\n     * @dev Called by an {IERC777} token contract whenever tokens are being\\n     * moved or created into a registered account (`to`). The type of operation\\n     * is conveyed by `from` being the zero address or not.\\n     *\\n     * This call occurs _after_ the token contract's state is updated, so\\n     * {IERC777-balanceOf}, etc., can be used to query the post-operation state.\\n     *\\n     * This function may revert to prevent the operation from being executed.\\n     */\\n    function tokensReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes calldata userData,\\n        bytes calldata operatorData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x0fd59f83d16f090c27a8105db0f4ad05b0f5d127f9878b82ebf0ad2bbc4e3f03\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC777/IERC777Sender.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC777TokensSender standard as defined in the EIP.\\n *\\n * {IERC777} Token holders can be notified of operations performed on their\\n * tokens by having a contract implement this interface (contract holders can be\\n *  their own implementer) and registering it on the\\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\\n *\\n * See {IERC1820Registry} and {ERC1820Implementer}.\\n */\\ninterface IERC777Sender {\\n    /**\\n     * @dev Called by an {IERC777} token contract whenever a registered holder's\\n     * (`from`) tokens are about to be moved or destroyed. The type of operation\\n     * is conveyed by `to` being the zero address or not.\\n     *\\n     * This call occurs _before_ the token contract's state is updated, so\\n     * {IERC777-balanceOf}, etc., can be used to query the pre-operation state.\\n     *\\n     * This function may revert to prevent the operation from being executed.\\n     */\\n    function tokensToSend(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes calldata userData,\\n        bytes calldata operatorData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x54230ad917ef5075db47e57ac43655f1197ac913686d5ced13062c2da0cce857\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant alphabet = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = alphabet[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x456e9b3a2bfe189b5249857f624f4139e59331db518483b456c4e587a20552e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC1820Registry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the global ERC1820 Registry, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1820[EIP]. Accounts may register\\n * implementers for interfaces in this registry, as well as query support.\\n *\\n * Implementers may be shared by multiple accounts, and can also implement more\\n * than a single interface for each account. Contracts can implement interfaces\\n * for themselves, but externally-owned accounts (EOA) must delegate this to a\\n * contract.\\n *\\n * {IERC165} interfaces can also be queried via the registry.\\n *\\n * For an in-depth explanation and source code analysis, see the EIP text.\\n */\\ninterface IERC1820Registry {\\n    /**\\n     * @dev Sets `newManager` as the manager for `account`. A manager of an\\n     * account is able to set interface implementers for it.\\n     *\\n     * By default, each account is its own manager. Passing a value of `0x0` in\\n     * `newManager` will reset the manager to this initial state.\\n     *\\n     * Emits a {ManagerChanged} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the current manager for `account`.\\n     */\\n    function setManager(address account, address newManager) external;\\n\\n    /**\\n     * @dev Returns the manager for `account`.\\n     *\\n     * See {setManager}.\\n     */\\n    function getManager(address account) external view returns (address);\\n\\n    /**\\n     * @dev Sets the `implementer` contract as ``account``'s implementer for\\n     * `interfaceHash`.\\n     *\\n     * `account` being the zero address is an alias for the caller's address.\\n     * The zero address can also be used in `implementer` to remove an old one.\\n     *\\n     * See {interfaceHash} to learn how these are created.\\n     *\\n     * Emits an {InterfaceImplementerSet} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the current manager for `account`.\\n     * - `interfaceHash` must not be an {IERC165} interface id (i.e. it must not\\n     * end in 28 zeroes).\\n     * - `implementer` must implement {IERC1820Implementer} and return true when\\n     * queried for support, unless `implementer` is the caller. See\\n     * {IERC1820Implementer-canImplementInterfaceForAddress}.\\n     */\\n    function setInterfaceImplementer(address account, bytes32 _interfaceHash, address implementer) external;\\n\\n    /**\\n     * @dev Returns the implementer of `interfaceHash` for `account`. If no such\\n     * implementer is registered, returns the zero address.\\n     *\\n     * If `interfaceHash` is an {IERC165} interface id (i.e. it ends with 28\\n     * zeroes), `account` will be queried for support of it.\\n     *\\n     * `account` being the zero address is an alias for the caller's address.\\n     */\\n    function getInterfaceImplementer(address account, bytes32 _interfaceHash) external view returns (address);\\n\\n    /**\\n     * @dev Returns the interface hash for an `interfaceName`, as defined in the\\n     * corresponding\\n     * https://eips.ethereum.org/EIPS/eip-1820#interface-name[section of the EIP].\\n     */\\n    function interfaceHash(string calldata interfaceName) external pure returns (bytes32);\\n\\n    /**\\n     * @notice Updates the cache with whether the contract implements an ERC165 interface or not.\\n     * @param account Address of the contract for which to update the cache.\\n     * @param interfaceId ERC165 interface for which to update the cache.\\n     */\\n    function updateERC165Cache(address account, bytes4 interfaceId) external;\\n\\n    /**\\n     * @notice Checks whether a contract implements an ERC165 interface or not.\\n     * If the result is not cached a direct lookup on the contract address is performed.\\n     * If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling\\n     * {updateERC165Cache} with the contract address.\\n     * @param account Address of the contract to check.\\n     * @param interfaceId ERC165 interface to check.\\n     * @return True if `account` implements `interfaceId`, false otherwise.\\n     */\\n    function implementsERC165Interface(address account, bytes4 interfaceId) external view returns (bool);\\n\\n    /**\\n     * @notice Checks whether a contract implements an ERC165 interface or not without using nor updating the cache.\\n     * @param account Address of the contract to check.\\n     * @param interfaceId ERC165 interface to check.\\n     * @return True if `account` implements `interfaceId`, false otherwise.\\n     */\\n    function implementsERC165InterfaceNoCache(address account, bytes4 interfaceId) external view returns (bool);\\n\\n    event InterfaceImplementerSet(address indexed account, bytes32 indexed interfaceHash, address indexed implementer);\\n\\n    event ManagerChanged(address indexed account, address indexed newManager);\\n}\\n\",\"keccak256\":\"0xd2df74f95cc1d14b07a93d913993cf17285ee037e9bd1cac4ac4d38b846eaeda\",\"license\":\"MIT\"},\"@snowfork/snowbridge-contracts/contracts/DOTApp.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"./WrappedToken.sol\\\";\\nimport \\\"./ScaleCodec.sol\\\";\\nimport \\\"./OutboundChannel.sol\\\";\\nimport \\\"./FeeSource.sol\\\";\\n\\nenum ChannelId {Basic, Incentivized}\\n\\ncontract DOTApp is FeeSource, AccessControl {\\n    using ScaleCodec for uint256;\\n\\n    mapping(ChannelId => Channel) public channels;\\n\\n    bytes2 constant UNLOCK_CALL = 0x4001;\\n\\n    WrappedToken public token;\\n\\n    bytes32 public constant FEE_BURNER_ROLE = keccak256(\\\"FEE_BURNER_ROLE\\\");\\n    bytes32 public constant INBOUND_CHANNEL_ROLE =\\n        keccak256(\\\"INBOUND_CHANNEL_ROLE\\\");\\n\\n    bytes32 public constant CHANNEL_UPGRADE_ROLE =\\n        keccak256(\\\"CHANNEL_UPGRADE_ROLE\\\");\\n\\n    event Upgraded(\\n        address upgrader,\\n        Channel basic,\\n        Channel incentivized\\n    );\\n\\n    struct Channel {\\n        address inbound;\\n        address outbound;\\n    }\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        address feeBurner,\\n        Channel memory _basic,\\n        Channel memory _incentivized\\n    ) {\\n        address[] memory defaultOperators;\\n        token = new WrappedToken(_name, _symbol, defaultOperators);\\n\\n        Channel storage c1 = channels[ChannelId.Basic];\\n        c1.inbound = _basic.inbound;\\n        c1.outbound = _basic.outbound;\\n\\n        Channel storage c2 = channels[ChannelId.Incentivized];\\n        c2.inbound = _incentivized.inbound;\\n        c2.outbound = _incentivized.outbound;\\n\\n        _setupRole(CHANNEL_UPGRADE_ROLE, msg.sender);\\n        _setRoleAdmin(INBOUND_CHANNEL_ROLE, CHANNEL_UPGRADE_ROLE);\\n        _setRoleAdmin(CHANNEL_UPGRADE_ROLE, CHANNEL_UPGRADE_ROLE);\\n        _setupRole(FEE_BURNER_ROLE, feeBurner);\\n        _setupRole(INBOUND_CHANNEL_ROLE, _basic.inbound);\\n        _setupRole(INBOUND_CHANNEL_ROLE, _incentivized.inbound);\\n    }\\n\\n    function burn(\\n        bytes32 _recipient,\\n        uint256 _amount,\\n        ChannelId _channelId\\n    ) external {\\n        require(\\n            _channelId == ChannelId.Basic ||\\n                _channelId == ChannelId.Incentivized,\\n            \\\"Invalid channel ID\\\"\\n        );\\n        token.burn(msg.sender, _amount, abi.encodePacked(_recipient));\\n\\n        OutboundChannel channel =\\n            OutboundChannel(channels[_channelId].outbound);\\n\\n        bytes memory call = encodeCall(msg.sender, _recipient, _amount);\\n        channel.submit(msg.sender, call);\\n    }\\n\\n    function mint(\\n        bytes32 _sender,\\n        address _recipient,\\n        uint256 _amount\\n    ) external onlyRole(INBOUND_CHANNEL_ROLE) {\\n        token.mint(_recipient, _amount, abi.encodePacked(_sender));\\n    }\\n\\n    // Incentivized channel calls this to charge (burn) fees\\n    function burnFee(address feePayer, uint256 _amount) external override onlyRole(FEE_BURNER_ROLE) {\\n        token.burn(feePayer, _amount, \\\"\\\");\\n    }\\n\\n    function encodeCall(\\n        address _sender,\\n        bytes32 _recipient,\\n        uint256 _amount\\n    ) private pure returns (bytes memory) {\\n        return\\n            bytes.concat(\\n                UNLOCK_CALL,\\n                abi.encodePacked(_sender),\\n                bytes1(0x00), // Encoding recipient as MultiAddress::Id\\n                _recipient,\\n                _amount.encode256()\\n            );\\n    }\\n\\n    function upgrade(\\n        Channel memory _basic,\\n        Channel memory _incentivized\\n    ) external onlyRole(CHANNEL_UPGRADE_ROLE) {\\n        Channel storage c1 = channels[ChannelId.Basic];\\n        Channel storage c2 = channels[ChannelId.Incentivized];\\n        // revoke old channel\\n        revokeRole(INBOUND_CHANNEL_ROLE, c1.inbound);\\n        revokeRole(INBOUND_CHANNEL_ROLE, c2.inbound);\\n        // set new channel\\n        c1.inbound = _basic.inbound;\\n        c1.outbound = _basic.outbound;\\n        c2.inbound = _incentivized.inbound;\\n        c2.outbound = _incentivized.outbound;\\n        grantRole(INBOUND_CHANNEL_ROLE, _basic.inbound);\\n        grantRole(INBOUND_CHANNEL_ROLE, _incentivized.inbound);\\n        emit Upgraded(msg.sender, c1, c2);\\n    }\\n}\\n\",\"keccak256\":\"0x65fd42e27375e26a26d048a0ff4db62f81c30837e0da7dc9245411e35f983ec0\",\"license\":\"Apache-2.0\"},\"@snowfork/snowbridge-contracts/contracts/FeeSource.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity >=0.7.6;\\npragma experimental ABIEncoderV2;\\n\\n// Something that can burn a fee from a feepayer account.\\ninterface FeeSource {\\n    function burnFee(address feePayer, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0xefc7d3f2e018dddaf04108d9d698a8821f533ad8e73bf4e59620f83d81ad6bc6\",\"license\":\"Apache-2.0\"},\"@snowfork/snowbridge-contracts/contracts/OutboundChannel.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity >=0.7.6;\\npragma experimental ABIEncoderV2;\\n\\ninterface OutboundChannel {\\n    function submit(address origin, bytes calldata payload) external;\\n}\\n\",\"keccak256\":\"0x5d446d6a0604bd56c556cd50f136537b119289155d7e3d0367b815596730f4dd\",\"license\":\"Apache-2.0\"},\"@snowfork/snowbridge-contracts/contracts/ScaleCodec.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity >=0.7.6;\\n\\nlibrary ScaleCodec {\\n\\n    // Sources:\\n    //   * https://ethereum.stackexchange.com/questions/15350/how-to-convert-an-bytes-to-address-in-solidity/50528\\n    //   * https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\\n\\n    function reverse256(uint256 input) internal pure returns (uint256 v) {\\n        v = input;\\n\\n        // swap bytes\\n        v = ((v & 0xFF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00) >> 8) |\\n            ((v & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) << 8);\\n\\n        // swap 2-byte long pairs\\n        v = ((v & 0xFFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000) >> 16) |\\n            ((v & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) << 16);\\n\\n        // swap 4-byte long pairs\\n        v = ((v & 0xFFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000) >> 32) |\\n            ((v & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) << 32);\\n\\n        // swap 8-byte long pairs\\n        v = ((v & 0xFFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF0000000000000000) >> 64) |\\n            ((v & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) << 64);\\n\\n        // swap 16-byte long pairs\\n        v = (v >> 128) | (v << 128);\\n    }\\n\\n    function reverse128(uint128 input) internal pure returns (uint128 v) {\\n        v = input;\\n\\n        // swap bytes\\n        v = ((v & 0xFF00FF00FF00FF00FF00FF00FF00FF00) >> 8) |\\n            ((v & 0x00FF00FF00FF00FF00FF00FF00FF00FF) << 8);\\n\\n        // swap 2-byte long pairs\\n        v = ((v & 0xFFFF0000FFFF0000FFFF0000FFFF0000) >> 16) |\\n            ((v & 0x0000FFFF0000FFFF0000FFFF0000FFFF) << 16);\\n\\n        // swap 4-byte long pairs\\n        v = ((v & 0xFFFFFFFF00000000FFFFFFFF00000000) >> 32) |\\n            ((v & 0x00000000FFFFFFFF00000000FFFFFFFF) << 32);\\n\\n        // swap 8-byte long pairs\\n        v = (v >> 64) | (v << 64);\\n    }\\n\\n    function reverse64(uint64 input) internal pure returns (uint64 v) {\\n        v = input;\\n\\n        // swap bytes\\n        v = ((v & 0xFF00FF00FF00FF00) >> 8) |\\n            ((v & 0x00FF00FF00FF00FF) << 8);\\n\\n        // swap 2-byte long pairs\\n        v = ((v & 0xFFFF0000FFFF0000) >> 16) |\\n            ((v & 0x0000FFFF0000FFFF) << 16);\\n\\n        // swap 4-byte long pairs\\n        v = (v >> 32) | (v << 32);\\n    }\\n\\n    function reverse32(uint32 input) internal pure returns (uint32 v) {\\n        v = input;\\n\\n        // swap bytes\\n        v = ((v & 0xFF00FF00) >> 8) |\\n            ((v & 0x00FF00FF) << 8);\\n\\n        // swap 2-byte long pairs\\n        v = (v >> 16) | (v << 16);\\n    }\\n\\n    function reverse16(uint16 input) internal pure returns (uint16 v) {\\n        v = input;\\n\\n        // swap bytes\\n        v = (v >> 8) | (v << 8);\\n    }\\n\\n    function encode256(uint256 input) public pure returns (bytes32) {\\n        return bytes32(reverse256(input));\\n    }\\n\\n    function encode128(uint128 input) public pure returns (bytes16) {\\n        return bytes16(reverse128(input));\\n    }\\n\\n    function encode64(uint64 input) public pure returns (bytes8) {\\n        return bytes8(reverse64(input));\\n    }\\n\\n    function encode32(uint32 input) public pure returns (bytes4) {\\n        return bytes4(reverse32(input));\\n    }\\n\\n    function encode16(uint16 input) public pure returns (bytes2) {\\n        return bytes2(reverse16(input));\\n    }\\n\\n    function encode8(uint8 input) public pure returns (bytes1) {\\n        return bytes1(input);\\n    }\\n}\\n\",\"keccak256\":\"0x155f967fb8badeb5eadfde5255c55911e18e6886174bf81afb15df2fbb9fdb62\",\"license\":\"Apache-2.0\"},\"@snowfork/snowbridge-contracts/contracts/WrappedToken.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity >=0.8.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC777/ERC777.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract WrappedToken is ERC777, Ownable {\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        address[] memory _defaultOperators\\n    )\\n        ERC777(_name, _symbol, _defaultOperators)\\n    { }\\n\\n    function burn(address sender, uint256 amount, bytes memory data) external onlyOwner {\\n        _burn(sender, amount, data, \\\"\\\");\\n    }\\n\\n    function mint(address recipient, uint256 amount, bytes memory data) external onlyOwner {\\n        _mint(recipient, amount, data, \\\"\\\");\\n    }\\n\\n    // Don't allow users to directly burn their wrapped tokens via the IERC777 burn API, as it won't redeem\\n    // the native tokens on substrate.\\n\\n    function burn(uint256, bytes memory) public pure override  {\\n        revert(\\\"not-supported\\\");\\n    }\\n\\n    function operatorBurn(address, uint256, bytes memory, bytes memory) public pure override {\\n        revert(\\\"not-supported\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x1b3c364377568b8ba6a8da62ee621468d41fe294d88a0cc48160bcc1925947a3\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200393c3803806200393c833981016040819052620000349162000462565b6060858582604051620000479062000341565b620000559392919062000534565b604051809103906000f08015801562000072573d6000803e3d6000fd5b50600280546001600160a01b03199081166001600160a01b039384161790915560008080526001602081815287517fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb4980548616918716919091178155888201517fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb4a805487169188169190911790559190925285517fcc69885fda6bcc1a4ace058b4a62bf5e179ea78fd58a1ccd71c22cc9b688792f80548516918616919091178155918601517fcc69885fda6bcc1a4ace058b4a62bf5e179ea78fd58a1ccd71c22cc9b68879308054909416941693909317909155620001826000805160206200391c833981519152336200023d565b620001ac600080516020620038fc8339815191526000805160206200391c8339815191526200024d565b620001c76000805160206200391c833981519152806200024d565b620001f37fffe71d6904653823f16901502129e7da73d4958bc25aad6e8555aa3d6ac73b97876200023d565b84516200021190600080516020620038fc833981519152906200023d565b83516200022f90600080516020620038fc833981519152906200023d565b5050505050505050620005f5565b620002498282620002a1565b5050565b600082815260208190526040902060010154819060405184907fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff90600090a460009182526020829052604090912060010155565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1662000249576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620002fd3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6121c0806200173c83390190565b80516001600160a01b03811681146200036757600080fd5b919050565b600082601f8301126200037e57600080fd5b81516001600160401b03808211156200039b576200039b620005df565b604051601f8301601f19908116603f01168101908282118183101715620003c657620003c6620005df565b81604052838152866020858801011115620003e057600080fd5b620003f3846020830160208901620005ac565b9695505050505050565b6000604082840312156200041057600080fd5b604080519081016001600160401b0381118282101715620004355762000435620005df565b60405290508062000446836200034f565b815262000456602084016200034f565b60208201525092915050565b600080600080600060e086880312156200047b57600080fd5b85516001600160401b03808211156200049357600080fd5b620004a189838a016200036c565b96506020880151915080821115620004b857600080fd5b50620004c7888289016200036c565b945050620004d8604087016200034f565b9250620004e98760608801620003fd565b9150620004fa8760a08801620003fd565b90509295509295909350565b6000815180845262000520816020860160208601620005ac565b601f01601f19169290920160200192915050565b60608152600062000549606083018662000506565b6020838203818501526200055e828762000506565b8481036040860152855180825282870193509082019060005b818110156200059e5784516001600160a01b03168352938301939183019160010162000577565b509098975050505050505050565b60005b83811015620005c9578181015183820152602001620005af565b83811115620005d9576000848401525b50505050565b634e487b7160e01b600052604160045260246000fd5b61113780620006056000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c806391d1485411610097578063d547741f11610066578063d547741f14610256578063efd8920d14610269578063fc0c546a14610290578063fdc16229146102bb57600080fd5b806391d14854146101d2578063a217fddf146101e5578063bc0c22a7146101ed578063ccd341321461020257600080fd5b80632f2ff15d116100d35780632f2ff15d1461018657806336568abe1461019957806371ac2bb6146101ac5780637ed9db59146101bf57600080fd5b806301ffc9a7146101055780630c86269f1461012d578063146bf19514610142578063248a9ca314610155575b600080fd5b610118610113366004610df9565b6102e2565b60405190151581526020015b60405180910390f35b61014061013b366004610d07565b610319565b005b610140610150366004610dc4565b6103bd565b610178610163366004610d31565b60009081526020819052604090206001015490565b604051908152602001610124565b610140610194366004610d63565b610572565b6101406101a7366004610d63565b61059d565b6101406101ba366004610e3e565b61061b565b6101406101cd366004610d8f565b6107a9565b6101186101e0366004610d63565b610847565b610178600081565b6101786000805160206110e283398151915281565b610236610210366004610e23565b600160208190526000918252604090912080549101546001600160a01b03918216911682565b604080516001600160a01b03938416815292909116602083015201610124565b610140610264366004610d63565b610870565b6101787fffe71d6904653823f16901502129e7da73d4958bc25aad6e8555aa3d6ac73b9781565b6002546102a3906001600160a01b031681565b6040516001600160a01b039091168152602001610124565b6101787f9bac3bf563d906e4c002c9b37dc34326776a9168ece7376a7a577f98c0c99a8981565b60006001600160e01b03198216637965db0b60e01b148061031357506301ffc9a760e01b6001600160e01b03198316145b92915050565b7fffe71d6904653823f16901502129e7da73d4958bc25aad6e8555aa3d6ac73b976103448133610896565b6002546040516344d1718760e01b81526001600160a01b038581166004830152602482018590526060604483015260006064830152909116906344d1718790608401600060405180830381600087803b1580156103a057600080fd5b505af11580156103b4573d6000803e3d6000fd5b50505050505050565b60008160018111156103d1576103d161109f565b14806103ee575060018160018111156103ec576103ec61109f565b145b6104345760405162461bcd60e51b8152602060048201526012602482015271125b9d985b1a590818da185b9b995b08125160721b60448201526064015b60405180910390fd5b60025460408051602080820187905282518083039091018152818301928390526344d1718760e01b9092526001600160a01b03909216916344d17187916104819133918791604401610fc8565b600060405180830381600087803b15801561049b57600080fd5b505af11580156104af573d6000803e3d6000fd5b505050506000600160008360018111156104cb576104cb61109f565b60018111156104dc576104dc61109f565b815260208101919091526040016000908120600101546001600160a01b031691506105083386866108fa565b6040516376846edd60e01b81529091506001600160a01b038316906376846edd906105399033908590600401610f5e565b600060405180830381600087803b15801561055357600080fd5b505af1158015610567573d6000803e3d6000fd5b505050505050505050565b60008281526020819052604090206001015461058e8133610896565b61059883836109e4565b505050565b6001600160a01b038116331461060d5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161042b565b6106178282610a68565b5050565b7f9bac3bf563d906e4c002c9b37dc34326776a9168ece7376a7a577f98c0c99a896106468133610896565b600160208190526000527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb4980547fcc69885fda6bcc1a4ace058b4a62bf5e179ea78fd58a1ccd71c22cc9b688792f906106b7906000805160206110e2833981519152906001600160a01b0316610870565b80546106db906000805160206110e2833981519152906001600160a01b0316610870565b845182546001600160a01b03199081166001600160a01b0380841691909117855560208089015160018088018054861692851692909217909155885186548516908416178655908801519085018054909316911617905561074b906000805160206110e283398151915290610572565b6107676000805160206110e28339815191528560000151610572565b7f30f77c97dcde9bb66d94051acfc00bf7cc5b681a05081da244812234f003749033838360405161079a93929190610f8a565b60405180910390a15050505050565b6000805160206110e28339815191526107c28133610896565b60025460408051602080820188905282518083039091018152818301928390526394d008ef60e01b9092526001600160a01b03909216916394d008ef9161080f9187918791604401610fc8565b600060405180830381600087803b15801561082957600080fd5b505af115801561083d573d6000803e3d6000fd5b5050505050505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b60008281526020819052604090206001015461088c8133610896565b6105988383610a68565b6108a08282610847565b610617576108b8816001600160a01b03166014610acd565b6108c3836020610acd565b6040516020016108d4929190610ee9565b60408051601f198184030181529082905262461bcd60e51b825261042b91600401610ff8565b604051606084811b6bffffffffffffffffffffffff191660208301529061400160f01b9060340160408051808303601f1901815290829052636fea3f0760e11b8252600482018590529060009086907386D9aC0Bab011917f57B9E9607833b4340F9D4F89063dfd47e0e9060240160206040518083038186803b15801561098057600080fd5b505af4158015610994573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b89190610d4a565b6040516020016109cc959493929190610e96565b60405160208183030381529060405290509392505050565b6109ee8282610847565b610617576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055610a243390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b610a728282610847565b15610617576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60606000610adc836002611023565b610ae790600261100b565b67ffffffffffffffff811115610aff57610aff6110cb565b6040519080825280601f01601f191660200182016040528015610b29576020820181803683370190505b509050600360fc1b81600081518110610b4457610b446110b5565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110610b7357610b736110b5565b60200101906001600160f81b031916908160001a9053506000610b97846002611023565b610ba290600161100b565b90505b6001811115610c1a576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110610bd657610bd66110b5565b1a60f81b828281518110610bec57610bec6110b5565b60200101906001600160f81b031916908160001a90535060049490941c93610c1381611072565b9050610ba5565b508315610c695760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161042b565b9392505050565b80356001600160a01b0381168114610c8757600080fd5b919050565b803560028110610c8757600080fd5b600060408284031215610cad57600080fd5b6040516040810181811067ffffffffffffffff82111715610cde57634e487b7160e01b600052604160045260246000fd5b604052905080610ced83610c70565b8152610cfb60208401610c70565b60208201525092915050565b60008060408385031215610d1a57600080fd5b610d2383610c70565b946020939093013593505050565b600060208284031215610d4357600080fd5b5035919050565b600060208284031215610d5c57600080fd5b5051919050565b60008060408385031215610d7657600080fd5b82359150610d8660208401610c70565b90509250929050565b600080600060608486031215610da457600080fd5b83359250610db460208501610c70565b9150604084013590509250925092565b600080600060608486031215610dd957600080fd5b8335925060208401359150610df060408501610c8c565b90509250925092565b600060208284031215610e0b57600080fd5b81356001600160e01b031981168114610c6957600080fd5b600060208284031215610e3557600080fd5b610c6982610c8c565b60008060808385031215610e5157600080fd5b610e5b8484610c9b565b9150610d868460408501610c9b565b60008151808452610e82816020860160208601611042565b601f01601f19169290920160200192915050565b6001600160f01b0319861681528451600090610eb9816002850160208a01611042565b6001600160f81b031995909516919094016002810191909152600381019290925260238201526043019392505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351610f21816017850160208801611042565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351610f52816028840160208801611042565b01602801949350505050565b6001600160a01b0383168152604060208201819052600090610f8290830184610e6a565b949350505050565b6001600160a01b0384811682528354811660208301526001808501548216604084015283548216606084015283015416608082015260a08101610f82565b60018060a01b0384168152826020820152606060408201526000610fef6060830184610e6a565b95945050505050565b602081526000610c696020830184610e6a565b6000821982111561101e5761101e611089565b500190565b600081600019048311821515161561103d5761103d611089565b500290565b60005b8381101561105d578181015183820152602001611045565b8381111561106c576000848401525b50505050565b60008161108157611081611089565b506000190190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfef857e99667b61d9feb64d6cb140ba8a8ba3501d58a4940223c8e74c45932fbf4a26469706673582212202876bca068998434c1764400947201bfbbf3828c28c842678f1fcb8583b8c7b764736f6c6343000806003360806040523480156200001157600080fd5b50604051620021c0380380620021c0833981016040819052620000349162000415565b82828282600290805190602001906200004f92919062000282565b5081516200006590600390602085019062000282565b5080516200007b90600490602084019062000311565b5060005b8151811015620000eb57600160056000848481518110620000a457620000a4620005cb565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580620000e281620005a1565b9150506200007f565b506040516329965a1d60e01b815230600482018190527fac7fbab5f54a3ca8194167523c6753bfeb96a445279294b6125b68cce217705460248301526044820152731820a4b7618bde71dce8cdc73aab6c95905fad24906329965a1d90606401600060405180830381600087803b1580156200016657600080fd5b505af11580156200017b573d6000803e3d6000fd5b50506040516329965a1d60e01b815230600482018190527faea199e31a596269b42cdafd93407f14436db6e4cad65417994c2eb37381e05a60248301526044820152731820a4b7618bde71dce8cdc73aab6c95905fad2492506329965a1d9150606401600060405180830381600087803b158015620001f957600080fd5b505af11580156200020e573d6000803e3d6000fd5b505050505050506000620002276200027e60201b60201c565b600980546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350505050620005f7565b3390565b828054620002909062000564565b90600052602060002090601f016020900481019282620002b45760008555620002ff565b82601f10620002cf57805160ff1916838001178555620002ff565b82800160010185558215620002ff579182015b82811115620002ff578251825591602001919060010190620002e2565b506200030d92915062000369565b5090565b828054828255906000526020600020908101928215620002ff579160200282015b82811115620002ff57825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019062000332565b5b808211156200030d57600081556001016200036a565b600082601f8301126200039257600080fd5b81516001600160401b03811115620003ae57620003ae620005e1565b6020620003c4601f8301601f1916820162000531565b8281528582848701011115620003d957600080fd5b60005b83811015620003f9578581018301518282018401528201620003dc565b838111156200040b5760008385840101525b5095945050505050565b6000806000606084860312156200042b57600080fd5b83516001600160401b03808211156200044357600080fd5b620004518783880162000380565b94506020915081860151818111156200046957600080fd5b620004778882890162000380565b9450506040860151818111156200048d57600080fd5b8601601f810188136200049f57600080fd5b805182811115620004b457620004b4620005e1565b8060051b9250620004c784840162000531565b8181528481019083860185850187018c1015620004e357600080fd5b600095508594505b83851015620005205780516001600160a01b03811681146200050b578687fd5b835260019490940193918601918601620004eb565b508096505050505050509250925092565b604051601f8201601f191681016001600160401b03811182821017156200055c576200055c620005e1565b604052919050565b600181811c908216806200057957607f821691505b602082108114156200059b57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415620005c457634e487b7160e01b600052601160045260246000fd5b5060010190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b611bb980620006076000396000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c80638da5cb5b116100c3578063d95b63711161007c578063d95b6371146102ab578063dd62ed3e146102be578063f2fde38b146102f7578063fad8b32a1461030a578063fc673c4f1461031d578063fe9d93031461033057600080fd5b80638da5cb5b1461023c57806394d008ef14610257578063959b8c3f1461026a57806395d89b411461027d5780639bd9bbc614610285578063a9059cbb1461029857600080fd5b8063313ce56711610115578063313ce567146101cd57806344d17187146101dc578063556f0dc7146101f157806362ad1b83146101f857806370a082311461020b578063715018a61461023457600080fd5b806306e485381461015257806306fdde0314610170578063095ea7b31461018557806318160ddd146101a857806323b872dd146101ba575b600080fd5b61015a61033e565b60405161016791906119c7565b60405180910390f35b6101786103a0565b6040516101679190611a14565b6101986101933660046117d4565b610429565b6040519015158152602001610167565b6001545b604051908152602001610167565b6101986101c8366004611700565b610441565b60405160128152602001610167565b6101ef6101ea366004611800565b61060a565b005b60016101ac565b6101ef610206366004611741565b610654565b6101ac61021936600461168d565b6001600160a01b031660009081526020819052604090205490565b6101ef6106d5565b6009546040516001600160a01b039091168152602001610167565b6101ef610265366004611800565b610749565b6101ef61027836600461168d565b61078e565b6101786108ac565b6101ef610293366004611800565b6108bb565b6101986102a63660046117d4565b6108d9565b6101986102b93660046116c7565b61098c565b6101ac6102cc3660046116c7565b6001600160a01b03918216600090815260086020908152604080832093909416825291909152205490565b6101ef61030536600461168d565b610a2e565b6101ef61031836600461168d565b610b19565b6101ef61032b366004611859565b610c35565b6101ef61032b3660046118d9565b6060600480548060200260200160405190810160405280929190818152602001828054801561039657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610378575b5050505050905090565b6060600280546103af90611b04565b80601f01602080910402602001604051908101604052809291908181526020018280546103db90611b04565b80156103965780601f106103fd57610100808354040283529160200191610396565b820191906000526020600020905b81548152906001019060200180831161040b57509395945050505050565b600033610437818585610c6d565b5060019392505050565b60006001600160a01b0383166104725760405162461bcd60e51b815260040161046990611a5c565b60405180910390fd5b6001600160a01b0384166104d75760405162461bcd60e51b815260206004820152602660248201527f4552433737373a207472616e736665722066726f6d20746865207a65726f206160448201526564647265737360d01b6064820152608401610469565b6000339050610508818686866040518060200160405280600081525060405180602001604052806000815250610d94565b610534818686866040518060200160405280600081525060405180602001604052806000815250610ecb565b6001600160a01b03808616600090815260086020908152604080832093851683529290522054838110156105bc5760405162461bcd60e51b815260206004820152602960248201527f4552433737373a207472616e7366657220616d6f756e74206578636565647320604482015268616c6c6f77616e636560b81b6064820152608401610469565b6105d086836105cb8785611aed565b610c6d565b6105fe828787876040518060200160405280600081525060405180602001604052806000815250600061103a565b50600195945050505050565b6009546001600160a01b031633146106345760405162461bcd60e51b815260040161046990611a27565b61064f8383836040518060200160405280600081525061120e565b505050565b61065e338661098c565b6106bf5760405162461bcd60e51b815260206004820152602c60248201527f4552433737373a2063616c6c6572206973206e6f7420616e206f70657261746f60448201526b39103337b9103437b63232b960a11b6064820152608401610469565b6106ce858585858560016113cc565b5050505050565b6009546001600160a01b031633146106ff5760405162461bcd60e51b815260040161046990611a27565b6009546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600980546001600160a01b0319169055565b6009546001600160a01b031633146107735760405162461bcd60e51b815260040161046990611a27565b61064f838383604051806020016040528060008152506114af565b336001600160a01b03821614156107f35760405162461bcd60e51b8152602060048201526024808201527f4552433737373a20617574686f72697a696e672073656c66206173206f70657260448201526330ba37b960e11b6064820152608401610469565b6001600160a01b03811660009081526005602052604090205460ff1615610844573360009081526007602090815260408083206001600160a01b03851684529091529020805460ff19169055610873565b3360009081526006602090815260408083206001600160a01b03851684529091529020805460ff191660011790555b60405133906001600160a01b038316907ff4caeb2d6ca8932a215a353d0703c326ec2d81fc68170f320eb2ab49e9df61f990600090a350565b6060600380546103af90611b04565b61064f338484846040518060200160405280600081525060016113cc565b60006001600160a01b0383166109015760405162461bcd60e51b815260040161046990611a5c565b6000339050610932818286866040518060200160405280600081525060405180602001604052806000815250610d94565b61095e818286866040518060200160405280600081525060405180602001604052806000815250610ecb565b610437818286866040518060200160405280600081525060405180602001604052806000815250600061103a565b6000816001600160a01b0316836001600160a01b031614806109f757506001600160a01b03831660009081526005602052604090205460ff1680156109f757506001600160a01b0380831660009081526007602090815260408083209387168352929052205460ff16155b80610a2757506001600160a01b0380831660009081526006602090815260408083209387168352929052205460ff165b9392505050565b6009546001600160a01b03163314610a585760405162461bcd60e51b815260040161046990611a27565b6001600160a01b038116610abd5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610469565b6009546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600980546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b038116331415610b7c5760405162461bcd60e51b815260206004820152602160248201527f4552433737373a207265766f6b696e672073656c66206173206f70657261746f6044820152603960f91b6064820152608401610469565b6001600160a01b03811660009081526005602052604090205460ff1615610bd0573360009081526007602090815260408083206001600160a01b03851684529091529020805460ff19166001179055610bfc565b3360009081526006602090815260408083206001600160a01b03851684529091529020805460ff191690555b60405133906001600160a01b038316907f50546e66e5f44d728365dc3908c63bc5cfeeab470722c1677e3073a6ac294aa190600090a350565b60405162461bcd60e51b815260206004820152600d60248201526c1b9bdd0b5cdd5c1c1bdc9d1959609a1b6044820152606401610469565b6001600160a01b038316610cd15760405162461bcd60e51b815260206004820152602560248201527f4552433737373a20617070726f76652066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610469565b6001600160a01b038216610d335760405162461bcd60e51b815260206004820152602360248201527f4552433737373a20617070726f766520746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610469565b6001600160a01b0383811660008181526008602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b60405163555ddc6560e11b81526001600160a01b03861660048201527f29ddb589b1fb5fc7cf394961c1adf5f8c6454761adf795e67fe149f658abe8956024820152600090731820a4b7618bde71dce8cdc73aab6c95905fad249063aabbb8ca9060440160206040518083038186803b158015610e1057600080fd5b505afa158015610e24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4891906116aa565b90506001600160a01b03811615610ec257604051633ad5cbc160e11b81526001600160a01b038216906375ab978290610e8f908a908a908a908a908a908a9060040161196d565b600060405180830381600087803b158015610ea957600080fd5b505af1158015610ebd573d6000803e3d6000fd5b505050505b50505050505050565b6001600160a01b03851660009081526020819052604090205483811015610f445760405162461bcd60e51b815260206004820152602760248201527f4552433737373a207472616e7366657220616d6f756e7420657863656564732060448201526662616c616e636560c81b6064820152608401610469565b610f4e8482611aed565b6001600160a01b038088166000908152602081905260408082209390935590871681529081208054869290610f84908490611ad5565b92505081905550846001600160a01b0316866001600160a01b0316886001600160a01b03167f06b541ddaa720db2b10a4d0cdac39b8d360425fc073085fac19bc82614677987878787604051610fdc93929190611aa0565b60405180910390a4846001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8660405161102991815260200190565b60405180910390a350505050505050565b60405163555ddc6560e11b81526001600160a01b03861660048201527fb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b6024820152600090731820a4b7618bde71dce8cdc73aab6c95905fad249063aabbb8ca9060440160206040518083038186803b1580156110b657600080fd5b505afa1580156110ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ee91906116aa565b90506001600160a01b0381161561116a576040516223de2960e01b81526001600160a01b038216906223de2990611133908b908b908b908b908b908b9060040161196d565b600060405180830381600087803b15801561114d57600080fd5b505af1158015611161573d6000803e3d6000fd5b50505050611204565b8115611204576001600160a01b0386163b156112045760405162461bcd60e51b815260206004820152604d60248201527f4552433737373a20746f6b656e20726563697069656e7420636f6e747261637460448201527f20686173206e6f20696d706c656d656e74657220666f7220455243373737546f60648201526c1ad95b9cd49958da5c1a595b9d609a1b608482015260a401610469565b5050505050505050565b6001600160a01b03841661126f5760405162461bcd60e51b815260206004820152602260248201527f4552433737373a206275726e2066726f6d20746865207a65726f206164647265604482015261737360f01b6064820152608401610469565b3361127f81866000878787610d94565b6001600160a01b038516600090815260208190526040902054848110156112f45760405162461bcd60e51b815260206004820152602360248201527f4552433737373a206275726e20616d6f756e7420657863656564732062616c616044820152626e636560e81b6064820152608401610469565b6112fe8582611aed565b6001600160a01b0387166000908152602081905260408120919091556001805487929061132c908490611aed565b92505081905550856001600160a01b0316826001600160a01b03167fa78a9be3a7b862d26933ad85fb11d80ef66b8f972d7cbba06621d583943a409887878760405161137a93929190611aa0565b60405180910390a36040518581526000906001600160a01b038816907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a3505050505050565b6001600160a01b03861661142d5760405162461bcd60e51b815260206004820152602260248201527f4552433737373a2073656e642066726f6d20746865207a65726f206164647265604482015261737360f01b6064820152608401610469565b6001600160a01b0385166114835760405162461bcd60e51b815260206004820181905260248201527f4552433737373a2073656e6420746f20746865207a65726f20616464726573736044820152606401610469565b33611492818888888888610d94565b6114a0818888888888610ecb565b610ec28188888888888861103a565b6114bd8484848460016114c3565b50505050565b6001600160a01b0385166115195760405162461bcd60e51b815260206004820181905260248201527f4552433737373a206d696e7420746f20746865207a65726f20616464726573736044820152606401610469565b600033905084600160008282546115309190611ad5565b90915550506001600160a01b0386166000908152602081905260408120805487929061155d908490611ad5565b909155506115739050816000888888888861103a565b856001600160a01b0316816001600160a01b03167f2fe5be0146f74c5bce36c0b80911af6c7d86ff27e89d5cfa61fc681327954e5d8787876040516115ba93929190611aa0565b60405180910390a36040518581526001600160a01b038716906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020016113bc565b600082601f83011261161157600080fd5b813567ffffffffffffffff8082111561162c5761162c611b55565b604051601f8301601f19908116603f0116810190828211818310171561165457611654611b55565b8160405283815286602085880101111561166d57600080fd5b836020870160208301376000602085830101528094505050505092915050565b60006020828403121561169f57600080fd5b8135610a2781611b6b565b6000602082840312156116bc57600080fd5b8151610a2781611b6b565b600080604083850312156116da57600080fd5b82356116e581611b6b565b915060208301356116f581611b6b565b809150509250929050565b60008060006060848603121561171557600080fd5b833561172081611b6b565b9250602084013561173081611b6b565b929592945050506040919091013590565b600080600080600060a0868803121561175957600080fd5b853561176481611b6b565b9450602086013561177481611b6b565b935060408601359250606086013567ffffffffffffffff8082111561179857600080fd5b6117a489838a01611600565b935060808801359150808211156117ba57600080fd5b506117c788828901611600565b9150509295509295909350565b600080604083850312156117e757600080fd5b82356117f281611b6b565b946020939093013593505050565b60008060006060848603121561181557600080fd5b833561182081611b6b565b925060208401359150604084013567ffffffffffffffff81111561184357600080fd5b61184f86828701611600565b9150509250925092565b6000806000806080858703121561186f57600080fd5b843561187a81611b6b565b935060208501359250604085013567ffffffffffffffff8082111561189e57600080fd5b6118aa88838901611600565b935060608701359150808211156118c057600080fd5b506118cd87828801611600565b91505092959194509250565b600080604083850312156118ec57600080fd5b82359150602083013567ffffffffffffffff81111561190a57600080fd5b61191685828601611600565b9150509250929050565b6000815180845260005b818110156119465760208185018101518683018201520161192a565b81811115611958576000602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0387811682528681166020830152851660408201526060810184905260c0608082018190526000906119a890830185611920565b82810360a08401526119ba8185611920565b9998505050505050505050565b6020808252825182820181905260009190848201906040850190845b81811015611a085783516001600160a01b0316835292840192918401916001016119e3565b50909695505050505050565b602081526000610a276020830184611920565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526024908201527f4552433737373a207472616e7366657220746f20746865207a65726f206164646040820152637265737360e01b606082015260800190565b838152606060208201526000611ab96060830185611920565b8281036040840152611acb8185611920565b9695505050505050565b60008219821115611ae857611ae8611b3f565b500190565b600082821015611aff57611aff611b3f565b500390565b600181811c90821680611b1857607f821691505b60208210811415611b3957634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114611b8057600080fd5b5056fea26469706673582212203c7e20c44794330c75e6f4106a2a23a9d7cd4a1f7dffeb5116aca1572d0e4e8564736f6c63430008060033f857e99667b61d9feb64d6cb140ba8a8ba3501d58a4940223c8e74c45932fbf49bac3bf563d906e4c002c9b37dc34326776a9168ece7376a7a577f98c0c99a89",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c806391d1485411610097578063d547741f11610066578063d547741f14610256578063efd8920d14610269578063fc0c546a14610290578063fdc16229146102bb57600080fd5b806391d14854146101d2578063a217fddf146101e5578063bc0c22a7146101ed578063ccd341321461020257600080fd5b80632f2ff15d116100d35780632f2ff15d1461018657806336568abe1461019957806371ac2bb6146101ac5780637ed9db59146101bf57600080fd5b806301ffc9a7146101055780630c86269f1461012d578063146bf19514610142578063248a9ca314610155575b600080fd5b610118610113366004610df9565b6102e2565b60405190151581526020015b60405180910390f35b61014061013b366004610d07565b610319565b005b610140610150366004610dc4565b6103bd565b610178610163366004610d31565b60009081526020819052604090206001015490565b604051908152602001610124565b610140610194366004610d63565b610572565b6101406101a7366004610d63565b61059d565b6101406101ba366004610e3e565b61061b565b6101406101cd366004610d8f565b6107a9565b6101186101e0366004610d63565b610847565b610178600081565b6101786000805160206110e283398151915281565b610236610210366004610e23565b600160208190526000918252604090912080549101546001600160a01b03918216911682565b604080516001600160a01b03938416815292909116602083015201610124565b610140610264366004610d63565b610870565b6101787fffe71d6904653823f16901502129e7da73d4958bc25aad6e8555aa3d6ac73b9781565b6002546102a3906001600160a01b031681565b6040516001600160a01b039091168152602001610124565b6101787f9bac3bf563d906e4c002c9b37dc34326776a9168ece7376a7a577f98c0c99a8981565b60006001600160e01b03198216637965db0b60e01b148061031357506301ffc9a760e01b6001600160e01b03198316145b92915050565b7fffe71d6904653823f16901502129e7da73d4958bc25aad6e8555aa3d6ac73b976103448133610896565b6002546040516344d1718760e01b81526001600160a01b038581166004830152602482018590526060604483015260006064830152909116906344d1718790608401600060405180830381600087803b1580156103a057600080fd5b505af11580156103b4573d6000803e3d6000fd5b50505050505050565b60008160018111156103d1576103d161109f565b14806103ee575060018160018111156103ec576103ec61109f565b145b6104345760405162461bcd60e51b8152602060048201526012602482015271125b9d985b1a590818da185b9b995b08125160721b60448201526064015b60405180910390fd5b60025460408051602080820187905282518083039091018152818301928390526344d1718760e01b9092526001600160a01b03909216916344d17187916104819133918791604401610fc8565b600060405180830381600087803b15801561049b57600080fd5b505af11580156104af573d6000803e3d6000fd5b505050506000600160008360018111156104cb576104cb61109f565b60018111156104dc576104dc61109f565b815260208101919091526040016000908120600101546001600160a01b031691506105083386866108fa565b6040516376846edd60e01b81529091506001600160a01b038316906376846edd906105399033908590600401610f5e565b600060405180830381600087803b15801561055357600080fd5b505af1158015610567573d6000803e3d6000fd5b505050505050505050565b60008281526020819052604090206001015461058e8133610896565b61059883836109e4565b505050565b6001600160a01b038116331461060d5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161042b565b6106178282610a68565b5050565b7f9bac3bf563d906e4c002c9b37dc34326776a9168ece7376a7a577f98c0c99a896106468133610896565b600160208190526000527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb4980547fcc69885fda6bcc1a4ace058b4a62bf5e179ea78fd58a1ccd71c22cc9b688792f906106b7906000805160206110e2833981519152906001600160a01b0316610870565b80546106db906000805160206110e2833981519152906001600160a01b0316610870565b845182546001600160a01b03199081166001600160a01b0380841691909117855560208089015160018088018054861692851692909217909155885186548516908416178655908801519085018054909316911617905561074b906000805160206110e283398151915290610572565b6107676000805160206110e28339815191528560000151610572565b7f30f77c97dcde9bb66d94051acfc00bf7cc5b681a05081da244812234f003749033838360405161079a93929190610f8a565b60405180910390a15050505050565b6000805160206110e28339815191526107c28133610896565b60025460408051602080820188905282518083039091018152818301928390526394d008ef60e01b9092526001600160a01b03909216916394d008ef9161080f9187918791604401610fc8565b600060405180830381600087803b15801561082957600080fd5b505af115801561083d573d6000803e3d6000fd5b5050505050505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b60008281526020819052604090206001015461088c8133610896565b6105988383610a68565b6108a08282610847565b610617576108b8816001600160a01b03166014610acd565b6108c3836020610acd565b6040516020016108d4929190610ee9565b60408051601f198184030181529082905262461bcd60e51b825261042b91600401610ff8565b604051606084811b6bffffffffffffffffffffffff191660208301529061400160f01b9060340160408051808303601f1901815290829052636fea3f0760e11b82526004820185905290600090869073__$276cc14ce47cc15bfe88c6e1cbd14dec7e$__9063dfd47e0e9060240160206040518083038186803b15801561098057600080fd5b505af4158015610994573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b89190610d4a565b6040516020016109cc959493929190610e96565b60405160208183030381529060405290509392505050565b6109ee8282610847565b610617576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055610a243390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b610a728282610847565b15610617576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60606000610adc836002611023565b610ae790600261100b565b67ffffffffffffffff811115610aff57610aff6110cb565b6040519080825280601f01601f191660200182016040528015610b29576020820181803683370190505b509050600360fc1b81600081518110610b4457610b446110b5565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110610b7357610b736110b5565b60200101906001600160f81b031916908160001a9053506000610b97846002611023565b610ba290600161100b565b90505b6001811115610c1a576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110610bd657610bd66110b5565b1a60f81b828281518110610bec57610bec6110b5565b60200101906001600160f81b031916908160001a90535060049490941c93610c1381611072565b9050610ba5565b508315610c695760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161042b565b9392505050565b80356001600160a01b0381168114610c8757600080fd5b919050565b803560028110610c8757600080fd5b600060408284031215610cad57600080fd5b6040516040810181811067ffffffffffffffff82111715610cde57634e487b7160e01b600052604160045260246000fd5b604052905080610ced83610c70565b8152610cfb60208401610c70565b60208201525092915050565b60008060408385031215610d1a57600080fd5b610d2383610c70565b946020939093013593505050565b600060208284031215610d4357600080fd5b5035919050565b600060208284031215610d5c57600080fd5b5051919050565b60008060408385031215610d7657600080fd5b82359150610d8660208401610c70565b90509250929050565b600080600060608486031215610da457600080fd5b83359250610db460208501610c70565b9150604084013590509250925092565b600080600060608486031215610dd957600080fd5b8335925060208401359150610df060408501610c8c565b90509250925092565b600060208284031215610e0b57600080fd5b81356001600160e01b031981168114610c6957600080fd5b600060208284031215610e3557600080fd5b610c6982610c8c565b60008060808385031215610e5157600080fd5b610e5b8484610c9b565b9150610d868460408501610c9b565b60008151808452610e82816020860160208601611042565b601f01601f19169290920160200192915050565b6001600160f01b0319861681528451600090610eb9816002850160208a01611042565b6001600160f81b031995909516919094016002810191909152600381019290925260238201526043019392505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351610f21816017850160208801611042565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351610f52816028840160208801611042565b01602801949350505050565b6001600160a01b0383168152604060208201819052600090610f8290830184610e6a565b949350505050565b6001600160a01b0384811682528354811660208301526001808501548216604084015283548216606084015283015416608082015260a08101610f82565b60018060a01b0384168152826020820152606060408201526000610fef6060830184610e6a565b95945050505050565b602081526000610c696020830184610e6a565b6000821982111561101e5761101e611089565b500190565b600081600019048311821515161561103d5761103d611089565b500290565b60005b8381101561105d578181015183820152602001611045565b8381111561106c576000848401525b50505050565b60008161108157611081611089565b506000190190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfef857e99667b61d9feb64d6cb140ba8a8ba3501d58a4940223c8e74c45932fbf4a26469706673582212202876bca068998434c1764400947201bfbbf3828c28c842678f1fcb8583b8c7b764736f6c63430008060033",
  "libraries": {
    "ScaleCodec": "0x86D9aC0Bab011917f57B9E9607833b4340F9D4F8"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 62,
        "contract": "@snowfork/snowbridge-contracts/contracts/DOTApp.sol:DOTApp",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)57_storage)"
      },
      {
        "astId": 5848,
        "contract": "@snowfork/snowbridge-contracts/contracts/DOTApp.sol:DOTApp",
        "label": "channels",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_enum(ChannelId)5835,t_struct(Channel)5884_storage)"
      },
      {
        "astId": 5854,
        "contract": "@snowfork/snowbridge-contracts/contracts/DOTApp.sol:DOTApp",
        "label": "token",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(WrappedToken)8076"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(WrappedToken)8076": {
        "encoding": "inplace",
        "label": "contract WrappedToken",
        "numberOfBytes": "20"
      },
      "t_enum(ChannelId)5835": {
        "encoding": "inplace",
        "label": "enum ChannelId",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)57_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)57_storage"
      },
      "t_mapping(t_enum(ChannelId)5835,t_struct(Channel)5884_storage)": {
        "encoding": "mapping",
        "key": "t_enum(ChannelId)5835",
        "label": "mapping(enum ChannelId => struct DOTApp.Channel)",
        "numberOfBytes": "32",
        "value": "t_struct(Channel)5884_storage"
      },
      "t_struct(Channel)5884_storage": {
        "encoding": "inplace",
        "label": "struct DOTApp.Channel",
        "members": [
          {
            "astId": 5881,
            "contract": "@snowfork/snowbridge-contracts/contracts/DOTApp.sol:DOTApp",
            "label": "inbound",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5883,
            "contract": "@snowfork/snowbridge-contracts/contracts/DOTApp.sol:DOTApp",
            "label": "outbound",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)57_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 54,
            "contract": "@snowfork/snowbridge-contracts/contracts/DOTApp.sol:DOTApp",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 56,
            "contract": "@snowfork/snowbridge-contracts/contracts/DOTApp.sol:DOTApp",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      }
    }
  }
}